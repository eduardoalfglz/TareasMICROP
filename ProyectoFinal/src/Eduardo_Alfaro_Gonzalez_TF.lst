
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;###################################################################################################################################################################################################
                        ;
                        ;
                        ;               Trabajo Final
                        ;               Eduardo Alfaro Gonzalez
                        ;               B50203
                        ;               Radar 623
                        ;               Ultima vez modificado 23/11/19
                        ;
                        ;
                        ;###################################################################################################################################################################################################
                        #include registers.inc
                        ; Memory maps and register equates
                        ; Choose one of DBUG12MAP (normal operation under DBUG12)
                        ;               EEPROMMAP  (DBUG12 in EEPROM mode)
                        ;               FLASHMAP   (Program loaded into Flash ROM)
0000                    DBUG12MAP equ 0        ; Memory mode is DBUG12MAP
                        ; EEPROMMAP equ 0         ; Memory mode is EEPROMMAP
                        #ifdef DBUG12MAP
0000                    REGBASE        equ        $0        ; register base
1000                    DATASTART equ        $1000        ; Start of data memory
2000                    DATAEND  equ        $2000        ; Stack pointer initial value (end of data RAM area)
2000                    PRSTART equ        $2000        ; Start of program memory (might be ROM)
3bff                    PREND        equ        $3BFF        ; End of program memory
                        
                        ; Functions in D-Bug12
ee84                    Getchar        equ        $EE84        ; Implemented in emulator
ee86                    Putchar equ        $EE86   ; Implemented in emulator
ee88                    Printf  equ     $EE88
ee8a                    GetCmdLine equ  $EE8A   ; FAR call
ee8e                    Sscanhex equ        $EE8E   ; FAR call
ee92                    Isxdigit equ    $EE92
ee94                    Toupper equ     $EE94
ee96                    Isalpha equ     $EE96
ee98                    Strlen  equ     $EE98
ee9a                    Strcpy  equ     $EE9A
ee9c                    Out2hex equ     $EE9C   ; FAR call
eea0                    Out4hex equ     $EEA0   ; FAR call
eea4                    SetUserVector equ $EEA4 ; No longer used
eea6                    WriteEEByte equ $EEA6   ; FAR call
eeaa                    EraseEE equ     $EEAA   ; FAR call
eeae                    ReadMem equ     $EEAE   ; FAR call
eeb2                    WriteMem equ    $EEB2   ; FAR call
                        
3e00                    VECTORTABLE equ $3E00        ; Vectors go here SHOULD ALSO INITIALIZE AT RUNTIME
0000                    STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
0000                    INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef EEPROMMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $3E00        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $400        ; Start of program memory
                        PREND        equ        $FFF        ; End of program memory
                        
                        VECTORTABLE equ $3E00        ; Vectors go here -- MUST BE INITIALIZED AT RUNTIME
                        INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef FLASHMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $4000        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $8000        ; Start of program memory
                        ; Note -- there are problems using the current free assemblers with paged memory
                        ; Best bet is to use logical addresses $8000 up only, set page register to 3E,
                        ; Change S1 records for $8000-BFFF to S2 records for page 3E and S1 records for $C000-$EFFF to
                        ; page 3F. Program startup vector goes in EFFE, and needs to be iin page 3F so PPAGE can be changed. 
                        PREND        equ        $EF7F        ; End of program memory
                        
                        VECTORTABLE equ $EF80        ; Vectors go here -- MUST BE INITIALIZED STATICALLY
                        STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
                        #endif
                        
                        
1000                    RAMSTART equ        DATASTART ; For compatibility
2000                    RAMEND equ        DATAEND   
                        
3e00                    UserRsrv0x80 equ (0*2)+VECTORTABLE
3e02                    UserRsrv0x82 equ (1*2)+VECTORTABLE
3e04                    UserRsrv0x84 equ (2*2)+VECTORTABLE
3e06                    UserRsrv0x86 equ (3*2)+VECTORTABLE
3e08                    UserRsrv0x88 equ (4*2)+VECTORTABLE
3e0a                    UserRsrv0x8a equ (5*2)+VECTORTABLE
3e0c                    UserPWMShDn equ (6*2)+VECTORTABLE
3e0e                    UserPortP equ (7*2)+VECTORTABLE
3e10                    UserMSCAN4Tx equ (8*2)+VECTORTABLE
3e12                    UserMSCAN4Rx equ (9*2)+VECTORTABLE
3e14                    UserMSCAN4Errs equ (10*2)+VECTORTABLE
3e16                    UserMSCAN4Wake equ (11*2)+VECTORTABLE
3e18                    UserMSCAN3Tx equ (12*2)+VECTORTABLE
3e1a                    UserMSCAN3Rx equ (13*2)+VECTORTABLE
3e1c                    UserMSCAN3Errs equ (14*2)+VECTORTABLE
3e1e                    UserMSCAN3Wake equ (15*2)+VECTORTABLE
3e20                    UserMSCAN2Tx equ (16*2)+VECTORTABLE
3e22                    UserMSCAN2Rx equ (17*2)+VECTORTABLE
3e24                    UserMSCAN2Errs equ (18*2)+VECTORTABLE
3e26                    UserMSCAN2Wake equ (19*2)+VECTORTABLE
3e28                    UserMSCAN1Tx equ (20*2)+VECTORTABLE
3e2a                    UserMSCAN1Rx equ (21*2)+VECTORTABLE
3e2c                    UserMSCAN1Errs equ (22*2)+VECTORTABLE
3e2e                    UserMSCAN1Wake equ (23*2)+VECTORTABLE
3e30                    UserMSCAN0Tx equ (24*2)+VECTORTABLE
3e32                    UserMSCAN0Rx equ (25*2)+VECTORTABLE
3e34                    UserMSCAN0Errs equ (26*2)+VECTORTABLE
3e36                    UserMSCAN0Wake equ (27*2)+VECTORTABLE
3e38                    UserFlash equ (28*2)+VECTORTABLE
3e3a                    UserEEPROM equ (29*2)+VECTORTABLE
3e3c                    UserSPI2 equ (30*2)+VECTORTABLE
3e3e                    UserSPI1 equ (31*2)+VECTORTABLE
3e40                    UserIIC equ (32*2)+VECTORTABLE
3e42                    UserDLC equ (33*2)+VECTORTABLE
3e44                    UserSCME equ (34*2)+VECTORTABLE
3e46                    UserCRG equ (35*2)+VECTORTABLE
3e48                    UserPAccBOv equ (36*2)+VECTORTABLE
3e4a                    UserModDwnCtr equ (37*2)+VECTORTABLE
3e4c                    UserPortH equ (38*2)+VECTORTABLE
3e4e                    UserPortJ equ (39*2)+VECTORTABLE
3e50                    UserAtoD1 equ (40*2)+VECTORTABLE
3e52                    UserAtoD0 equ (41*2)+VECTORTABLE
3e54                    UserSCI1 equ (42*2)+VECTORTABLE
3e56                    UserSCI0 equ (43*2)+VECTORTABLE
3e58                    UserSPI0 equ (44*2)+VECTORTABLE
3e5a                    UserPAccEdge equ (45*2)+VECTORTABLE
3e5c                    UserPAccOvf equ (46*2)+VECTORTABLE
3e5e                    UserTimerOvf equ (47*2)+VECTORTABLE
3e60                    UserTimerCh7 equ (48*2)+VECTORTABLE
3e62                    UserTimerCh6 equ (49*2)+VECTORTABLE
3e64                    UserTimerCh5 equ (50*2)+VECTORTABLE
3e66                    UserTimerCh4 equ (51*2)+VECTORTABLE
3e68                    UserTimerCh3 equ (52*2)+VECTORTABLE
3e6a                    UserTimerCh2 equ (53*2)+VECTORTABLE
3e6c                    UserTimerCh1 equ (54*2)+VECTORTABLE
3e6e                    UserTimerCh0 equ (55*2)+VECTORTABLE
3e70                    UserRTI equ (56*2)+VECTORTABLE
3e72                    UserIRQ equ (57*2)+VECTORTABLE
3e74                    UserXIRQ equ (58*2)+VECTORTABLE
3e76                    UserSWI equ (59*2)+VECTORTABLE
3e78                    UserTrap equ (60*2)+VECTORTABLE
                        
                        
                        *
                        *
                        *  HC12 i/o register locations (9s12dp256)
                        *
                        *
0000                    PORTA:          equ REGBASE+0   ;port a = address lines a8 - a15
0001                    PORTB:          equ REGBASE+1   ;port b = address lines a0 - a7
0002                    DDRA:           equ REGBASE+2   ;port a direction register
0003                    DDRB:           equ REGBASE+3   ;port b direction register
                        
0008                    PORTE:          equ REGBASE+8   ;port e = mode,irq and control signals
0009                    DDRE:           equ REGBASE+9   ;port e direction register
000a                    PEAR:           equ REGBASE+$a  ;port e assignments
000b                    MODE:           equ REGBASE+$b  ;mode register
000c                    PUCR:           equ REGBASE+$c  ;port pull-up control register
000d                    RDRIV:          equ REGBASE+$d  ;port reduced drive control register
000e                    EBICTL:                equ REGBASE+$e  ;e stretch control
                        
0010                    INITRM:         equ REGBASE+$10 ;ram location register
0011                    INITRG:         equ REGBASE+$11 ;register location register
0012                    INITEE:         equ REGBASE+$12 ;eeprom location register
0013                    MISC:           equ REGBASE+$13 ;miscellaneous mapping control
0014                    MTST0:          equ REGBASE+$14 ; reserved
0015                    ITCR:           equ REGBASE+$15 ;interrupt test control register
0016                    ITEST:          equ REGBASE+$16 ;interrupt test register
0017                    MTST1:          equ REGBASE+$17 ; reserved
                        
001a                    PARTIDH:        equ REGBASE+$1a ;part id high
001b                    PARTIDL:        equ REGBASE+$1b ;part id low
001c                    MEMSIZ0:        equ REGBASE+$1c ;memory size
001d                    MEMSIZ1:        equ REGBASE+$1d ;memory size
001e                    IRQCR:          equ REGBASE+$1e ;interrupt control register
001e                    INTCR:          equ REGBASE+$1e ;interrupt control register (old name)
001f                    HPRIO:          equ REGBASE+$1f ;high priority reg
                        
0028                    BKPCT0:         equ REGBASE+$28 ;break control register
0029                    BKPCT1:         equ REGBASE+$29 ;break control register
002a                    BKP0X:          equ REGBASE+$2a ; break 0 index register
002b                    BKP0H:          equ REGBASE+$2b ; break 0 pointer high
002c                    BRP0L:          equ REGBASE+$2c ; break 0 pointer low
002d                    BKP1X:          equ REGBASE+$2d ; break 1 index register
002e                    BKP1H:          equ REGBASE+$2e ; break 1 pointer high
002f                    BRP1L:          equ REGBASE+$2f ; break 1 pointer low
0030                    PPAGE:                equ REGBASE+$30 ;program page register
                        
0032                    PORTK:                equ REGBASE+$32 ;port k data
0033                    DDRK:                equ REGBASE+$33 ;port k direction
                        
0034                    SYNR:           equ REGBASE+$34 ; synthesizer / multiplier register
0035                    REFDV:          equ REGBASE+$35 ; reference divider register
0036                    CTFLG:          equ REGBASE+$36 ; reserved
0037                    CRGFLG:         equ REGBASE+$37 ; pll flags register
0038                    CRGINT:         equ REGBASE+$38 ; pll interrupt register
0039                    CLKSEL:         equ REGBASE+$39 ; clock select register
003a                    PLLCTL:         equ REGBASE+$3a ; pll control register
003b                    RTICTL:         equ REGBASE+$3b ;real time interrupt control
003c                    COPCTL:         equ REGBASE+$3c ;watchdog control
003d                    FORBYP:         equ REGBASE+$3d ;
003e                    CTCTL:          equ REGBASE+$3e ;
003f                    ARMCOP:         equ REGBASE+$3f ;cop reset register
                        
0040                    TIOS:           equ REGBASE+$40 ;timer input/output select
0041                    CFORC:          equ REGBASE+$41 ;timer compare force
0042                    OC7M:           equ REGBASE+$42 ;timer output compare 7 mask
0043                    OC7D:           equ REGBASE+$43 ;timer output compare 7 data
0044                    TCNT:           equ REGBASE+$44 ;timer counter register hi
                        *TCNT:          equ REGBASE+$45 ;timer counter register lo
0046                    TSCR:           equ REGBASE+$46 ;timer system control register (Old Name)
0046                    TSCR1:          equ REGBASE+$46 ;timer system control register
0047                    TTOV:           equ REGBASE+$47 ;reserved
0048                    TCTL1:          equ REGBASE+$48 ;timer control register 1
0049                    TCTL2:          equ REGBASE+$49 ;timer control register 2
004a                    TCTL3:          equ REGBASE+$4a ;timer control register 3
004b                    TCTL4:          equ REGBASE+$4b ;timer control register 4
004c                    TMSK1:          equ REGBASE+$4c ;timer interrupt mask 1 (Old Name)
004c                    TIE:            equ REGBASE+$4c ;timer interrupt mask 1
004d                    TMSK2:          equ REGBASE+$4d ;timer interrupt mask 2 (Old Name)
004d                    TSCR2:          equ REGBASE+$4d ;timer interrupt mask 2
004e                    TFLG1:          equ REGBASE+$4e ;timer flags 1
004f                    TFLG2:          equ REGBASE+$4f ;timer flags 2
0050                    TC0:            equ REGBASE+$50 ;timer capture/compare register 0
0052                    TC1:            equ REGBASE+$52 ;timer capture/compare register 1
0054                    TC2:            equ REGBASE+$54 ;timer capture/compare register 2
0056                    TC3:            equ REGBASE+$56 ;timer capture/compare register 3
0058                    TC4:            equ REGBASE+$58 ;timer capture/compare register 4
005a                    TC5:            equ REGBASE+$5a ;timer capture/compare register 5
005c                    TC6:            equ REGBASE+$5c ;timer capture/compare register 6
005e                    TC7:            equ REGBASE+$5e ;timer capture/compare register 7
0060                    PACTL:          equ REGBASE+$60 ;pulse accumulator controls
0061                    PAFLG:          equ REGBASE+$61 ;pulse accumulator flags
0062                    PACN3:          equ REGBASE+$62 ;pulse accumulator counter 3
0063                    PACN2:          equ REGBASE+$63 ;pulse accumulator counter 2
0064                    PACN1:          equ REGBASE+$64 ;pulse accumulator counter 1
0065                    PACN0:          equ REGBASE+$65 ;pulse accumulator counter 0
0066                    MCCTL:          equ REGBASE+$66 ;modulus down conunter control
0067                    MCFLG:          equ REGBASE+$67 ;down counter flags
0068                    ICPAR:          equ REGBASE+$68 ;input pulse accumulator control
0069                    DLYCT:          equ REGBASE+$69 ;delay count to down counter
006a                    ICOVW:          equ REGBASE+$6a ;input control overwrite register
006b                    ICSYS:          equ REGBASE+$6b ;input control system control
                        
006d                    TIMTST:         equ REGBASE+$6d ;timer test register
                        
0070                    PBCTL:          equ REGBASE+$70 ; pulse accumulator b control
0071                    PBFLG:          equ REGBASE+$71 ; pulse accumulator b flags
0072                    PA3H:           equ REGBASE+$72 ; pulse accumulator holding register 3
0073                    PA2H:           equ REGBASE+$73 ; pulse accumulator holding register 2
0074                    PA1H:           equ REGBASE+$74 ; pulse accumulator holding register 1
0075                    PA0H:           equ REGBASE+$75 ; pulse accumulator holding register 0
0076                    MCCNT:          equ REGBASE+$76 ; modulus down counter register
                        *MCCNTL:        equ REGBASE+$77 ; low byte
0078                    TCOH:           equ REGBASE+$78 ; capture 0 holding register
007a                    TC1H:           equ REGBASE+$7a ; capture 1 holding register
007c                    TC2H:           equ REGBASE+$7c ; capture 2 holding register
007e                    TC3H:           equ REGBASE+$7e ; capture 3 holding register
                        
0080                    ATD0CTL0:       equ REGBASE+$80 ;adc control 0 (reserved)
0081                    ATD0CTL1:       equ REGBASE+$81 ;adc control 1 (reserved)
0082                    ATD0CTL2:       equ REGBASE+$82 ;adc control 2
0083                    ATD0CTL3:       equ REGBASE+$83 ;adc control 3
0084                    ATD0CTL4:       equ REGBASE+$84 ;adc control 4
0085                    ATD0CTL5:       equ REGBASE+$85 ;adc control 5
0086                    ATD0STAT:       equ REGBASE+$86 ;adc status register hi
0086                    ATD0STAT0:      equ REGBASE+$86 ;adc status register hi
008b                    ATD0STAT1:      equ REGBASE+$8b ;adc status register lo
0088                    ATD0TEST:       equ REGBASE+$88 ;adc test (reserved)
                        *atd0test       equ REGBASE+$89 ;
                        
008d                    ATD0DIEN:        equ REGBASE+$8d ;
                        
008f                    PORTAD:         equ REGBASE+$8f ;port adc = input only
0090                    ADR00H:         equ REGBASE+$90 ;adc result 0 register
0092                    ADR01H:         equ REGBASE+$92 ;adc result 1 register
0094                    ADR02H:         equ REGBASE+$94 ;adc result 2 register
0096                    ADR03H:         equ REGBASE+$96 ;adc result 3 register
0098                    ADR04H:         equ REGBASE+$98 ;adc result 4 register
009a                    ADR05H:         equ REGBASE+$9a ;adc result 5 register
009c                    ADR06H:         equ REGBASE+$9c ;adc result 6 register
009e                    ADR07H:         equ REGBASE+$9e ;adc result 7 register
                        
00a0                    PWME:                equ REGBASE+$a0 ;pwm enable
00a1                    PWMPOL:         equ REGBASE+$a1 ;pwm polarity
00a2                    PWMCLK:         equ REGBASE+$a2 ;pwm clock select register
00a3                    PWMPRCLK:       equ REGBASE+$a3 ;pwm prescale clock select register
00a4                    PWMCAE:         equ REGBASE+$a4 ;pwm center align select register
00a5                    PWMCTL:         equ REGBASE+$a5 ;pwm control register
00a6                    PWMTST:         equ REGBASE+$a6 ;reserved
00a7                    PWMPRSC:        equ REGBASE+$a7 ;reserved
00a8                    PWMSCLA:        equ REGBASE+$a8 ;pwm scale a
00a9                    PWMSCLB:        equ REGBASE+$a9 ;pwm scale b
00aa                    PWMSCNTA:       equ REGBASE+$aa ;reserved
00ab                    PWMSCNTB:       equ REGBASE+$ab ;reserved
00ac                    PWMCNT0:        equ REGBASE+$ac ;pwm channel 0 counter
00ad                    PWMCNT1:        equ REGBASE+$ad ;pwm channel 1 counter
00ae                    PWMCNT2:        equ REGBASE+$ae ;pwm channel 2 counter
00af                    PWMCNT3:        equ REGBASE+$af ;pwm channel 3 counter
00b0                    PWMCNT4:        equ REGBASE+$b0 ;pwm channel 4 counter
00b1                    PWMCNT5:        equ REGBASE+$b1 ;pwm channel 5 counter
00b2                    PWMCNT6:        equ REGBASE+$b2 ;pwm channel 6 counter
00b3                    PWMCNT7:        equ REGBASE+$b3 ;pwm channel 7 counter
00b4                    PWMPER0:        equ REGBASE+$b4 ;pwm channel 0 period
00b5                    PWMPER1:        equ REGBASE+$b5 ;pwm channel 1 period
00b6                    PWMPER2:        equ REGBASE+$b6 ;pwm channel 2 period
00b7                    PWMPER3:        equ REGBASE+$b7 ;pwm channel 3 period
00b8                    PWMPER4:        equ REGBASE+$b8 ;pwm channel 4 period
00b9                    PWMPER5:        equ REGBASE+$b9 ;pwm channel 5 period
00ba                    PWMPER6:        equ REGBASE+$ba ;pwm channel 6 period
00bb                    PWMPER7:        equ REGBASE+$bb ;pwm channel 7 period
00bc                    PWMDTY0:        equ REGBASE+$bc ;pwm channel 0 duty cycle
00bd                    PWMDTY1:        equ REGBASE+$bd ;pwm channel 1 duty cycle
00be                    PWMDTY2:        equ REGBASE+$be ;pwm channel 2 duty cycle
00bf                    PWMDTY3:        equ REGBASE+$bf ;pwm channel 3 duty cycle
00c0                    PWMDTY4:        equ REGBASE+$c0 ;pwm channel 4 duty cycle
00c1                    PWMDTY5:        equ REGBASE+$c1 ;pwm channel 5 duty cycle
00c2                    PWMDTY6:        equ REGBASE+$c2 ;pwm channel 6 duty cycle
00c3                    PWMDTY7:        equ REGBASE+$c3 ;pwm channel 7 duty cycle
00c4                    PWMSDN:         equ REGBASE+$c4 ;pwm shutdown register
                        
00c8                    SC0BDH:         equ REGBASE+$c8 ;sci 0 baud reg hi byte
00c9                    SC0BDL:         equ REGBASE+$c9 ;sci 0 baud reg lo byte
00ca                    SC0CR1:         equ REGBASE+$ca ;sci 0 control1 reg
00cb                    SC0CR2:         equ REGBASE+$cb ;sci 0 control2 reg
00cc                    SC0SR1:         equ REGBASE+$cc ;sci 0 status reg 1
00cd                    SC0SR2:         equ REGBASE+$cd ;sci 0 status reg 2
00ce                    SC0DRH:         equ REGBASE+$ce ;sci 0 data reg hi
00cf                    SC0DRL:         equ REGBASE+$cf ;sci 0 data reg lo
                        
00d0                    SC1BDH:         equ REGBASE+$d0 ;sci 1 baud reg hi byte
00d1                    SC1BDL:         equ REGBASE+$d1 ;sci 1 baud reg lo byte
00d2                    SC1CR1:         equ REGBASE+$d2 ;sci 1 control1 reg
00d3                    SC1CR2:         equ REGBASE+$d3 ;sci 1 control2 reg
00d4                    SC1SR1:         equ REGBASE+$d4 ;sci 1 status reg 1
00d5                    SC1SR2:         equ REGBASE+$d5 ;sci 1 status reg 2
00d6                    SC1DRH:         equ REGBASE+$d6 ;sci 1 data reg hi
00d7                    SC1DRL:         equ REGBASE+$d7 ;sci 1 data reg lo
                        
00d8                    SPI0CR1:        equ REGBASE+$d8 ;spi 0 control1 reg
00d9                    SPI0CR2:        equ REGBASE+$d9 ;spi 0 control2 reg
00da                    SPI0BR:         equ REGBASE+$da ;spi 0 baud reg
00db                    SPI0SR:         equ REGBASE+$db ;spi 0 status reg hi
00dd                    SP0DR:          equ REGBASE+$dd ;spi 0 data reg  FOR COMPATIBILITY
00dd                    SPI0DR:          equ REGBASE+$dd ;spi 0 data reg
                        
00e0                    IBAD:                equ REGBASE+$e0 ;i2c bus address register
00e1                    IBFD:                equ REGBASE+$e1 ;i2c bus frequency divider
00e2                    IBCR:                equ REGBASE+$e2 ;i2c bus control register
00e3                    IBSR:                equ REGBASE+$e3 ;i2c bus status register
00e4                    IBDR:                equ REGBASE+$e4 ;i2c bus message data register
                        
00e8                    DLCBCR1:        equ REGBASE+$e8 ;bdlc control regsiter 1
00e9                    DLCBSVR:        equ REGBASE+$e9 ;bdlc state vector register
00ea                    DLCBCR2:        equ REGBASE+$ea ;bdlc control register 2
00eb                    DLCBDR:                equ REGBASE+$eb ;bdlc data register
00ec                    DLCBARD:        equ REGBASE+$ec ;bdlc analog delay register
00ed                    DLCBRSR:        equ REGBASE+$ed ;bdlc rate select register
00ee                    DLCSCR:                equ REGBASE+$ee ;bdlc control register
00ef                    DLCBSTAT:        equ REGBASE+$ef ;bdlc status register
                        
00f0                    SPI1CR1:        equ REGBASE+$f0 ;spi 1 control1 reg
00f1                    SPI1CR2:        equ REGBASE+$f1 ;spi 1 control2 reg
00f2                    SPI1BR:         equ REGBASE+$f2 ;spi 1 baud reg
00f3                    SPI1SR:         equ REGBASE+$f3 ;spi 1 status reg hi
00f5                    SPI1DR:          equ REGBASE+$f5 ;spi 1 data reg
00f5                    SP1DR:          equ REGBASE+$f5 ;spi 1 data reg   FOR COMPATIBILITY
                        
00f8                    SPI2CR1:        equ REGBASE+$f8 ;spi 2 control1 reg
00f9                    SPI2CR2:        equ REGBASE+$f9 ;spi 2 control2 reg
00fa                    SPI2BR:         equ REGBASE+$fa ;spi 2 baud reg
00fb                    SPI2SR:         equ REGBASE+$fb ;spi 2 status reg hi
00fd                    SPI2DR:         equ REGBASE+$fd ;spi 2 data reg
00fd                    SP2DR:          equ REGBASE+$fd ;spi 2 data reg   FOR COMPATIBILITY
                        
0100                    FCLKDIV:        equ REGBASE+$100 ;flash clock divider
0101                    FSEC:                equ REGBASE+$101 ;flash security register
                        
0103                    FCNFG:                equ REGBASE+$103 ;flash configuration register
0104                    FPROT:                equ REGBASE+$104 ;flash protection register
0105                    FSTAT:                equ REGBASE+$105 ;flash status register
0106                    FCMD:                equ REGBASE+$106 ;flash command register
                        
0110                    ECLKDIV:        equ REGBASE+$110 ;eeprom clock divider
                        
0113                    ECNFG:                equ REGBASE+$113 ;eeprom configuration register
0114                    EPROT:                equ REGBASE+$114 ;eeprom protection register
0115                    ESTAT:                equ REGBASE+$115 ;eeprom status register
0116                    ECMD:                equ REGBASE+$116 ;eeprom command register
                        
0120                    ATD1CTL0:       equ REGBASE+$120 ;adc1 control 0 (reserved)
0121                    ATD1CTL1:       equ REGBASE+$121 ;adc1 control 1 (reserved)
0122                    ATD1CTL2:       equ REGBASE+$122 ;adc1 control 2
0123                    ATD1CTL3:       equ REGBASE+$123 ;adc1 control 3
0124                    ATD1CTL4:       equ REGBASE+$124 ;adc1 control 4
0125                    ATD1CTL5:       equ REGBASE+$125 ;adc1 control 5
0126                    ATD1STAT0:      equ REGBASE+$126 ;adc1 status register hi
012b                    ATD1STAT1:      equ REGBASE+$12b ;adc1 status register lo
0128                    ATD1TEST:       equ REGBASE+$128 ;adc1 test (reserved)
                        *atd1test       equ REGBASE+$129 ;
                        
012d                    ATDDIEN:        equ REGBASE+$12d ;adc1 input enable register
                        
012f                    PORTAD1:        equ REGBASE+$12f ;port adc1 = input only
0130                    ADR10H:         equ REGBASE+$130 ;adc1 result 0 register
0132                    ADR11H:         equ REGBASE+$132 ;adc1 result 1 register
0134                    ADR12H:         equ REGBASE+$134 ;adc1 result 2 register
0136                    ADR13H:         equ REGBASE+$136 ;adc1 result 3 register
0138                    ADR14H:         equ REGBASE+$138 ;adc1 result 4 register
013a                    ADR15H:         equ REGBASE+$13a ;adc1 result 5 register
013c                    ADR16H:         equ REGBASE+$13c ;adc1 result 6 register
013e                    ADR17H:         equ REGBASE+$13e ;adc1 result 7 register
                        
0140                    CAN0CTL0:        equ REGBASE+$140 ;can0 control register 0
0141                    CAN0CTL1:        equ REGBASE+$141 ;can0 control register 1
0142                    CAN0BTR0:        equ REGBASE+$142 ;can0 bus timing register 0
0143                    CAN0BTR1:        equ REGBASE+$143 ;can0 bus timing register 1
0144                    CAN0RFLG:        equ REGBASE+$144 ;can0 receiver flags
0145                    CAN0RIER:        equ REGBASE+$145 ;can0 receiver interrupt enables
0146                    CAN0TFLG:        equ REGBASE+$146 ;can0 transmit flags
0147                    CAN0TIER:        equ REGBASE+$147 ;can0 transmit interrupt enables
0148                    CAN0TARQ:        equ REGBASE+$148 ;can0 transmit message abort control
0149                    CAN0TAAK:        equ REGBASE+$149 ;can0 transmit message abort status
014a                    CAN0TBEL:        equ REGBASE+$14a ;can0 transmit buffer select
014b                    CAN0IDAC:        equ REGBASE+$14b ;can0 identfier acceptance control
                        
014e                    CAN0RERR:        equ REGBASE+$14e ;can0 receive error counter
014f                    CAN0TERR:        equ REGBASE+$14f ;can0 transmit error counter
0150                    CAN0IDA0:        equ REGBASE+$150 ;can0 identifier acceptance register 0
0151                    CAN0IDA1:        equ REGBASE+$151 ;can0 identifier acceptance register 1
0152                    CAN0IDA2:        equ REGBASE+$152 ;can0 identifier acceptance register 2
0153                    CAN0IDA3:        equ REGBASE+$153 ;can0 identifier acceptance register 3
0154                    CAN0IDM0:        equ REGBASE+$154 ;can0 identifier mask register 0
0155                    CAN0IDM1:        equ REGBASE+$155 ;can0 identifier mask register 1
0156                    CAN0IDM2:        equ REGBASE+$156 ;can0 identifier mask register 2
0157                    CAN0IDM3:        equ REGBASE+$157 ;can0 identifier mask register 3
0158                    CAN0IDA4:        equ REGBASE+$158 ;can0 identifier acceptance register 4
0159                    CAN0IDA5:        equ REGBASE+$159 ;can0 identifier acceptance register 5
015a                    CAN0IDA6:        equ REGBASE+$15a ;can0 identifier acceptance register 6
015b                    CAN0IDA7:        equ REGBASE+$15b ;can0 identifier acceptance register 7
015c                    CAN0IDM4:        equ REGBASE+$15c ;can0 identifier mask register 4
015d                    CAN0IDM5:        equ REGBASE+$15d ;can0 identifier mask register 5
015e                    CAN0IDM6:        equ REGBASE+$15e ;can0 identifier mask register 6
015f                    CAN0IDM7:        equ REGBASE+$15f ;can0 identifier mask register 7
0160                    CAN0RXFG:        equ REGBASE+$160 ;can0 rx foreground buffer thru +$16f
0170                    CAN0TXFG:        equ REGBASE+$170 ;can0 tx foreground buffer thru +$17f
                        
0180                    CAN1CTL0:        equ REGBASE+$180 ;can1 control register 0
0181                    CAN1CTL1:        equ REGBASE+$181 ;can1 control register 1
0182                    CAN1BTR0:        equ REGBASE+$182 ;can1 bus timing register 0
0183                    CAN1BTR1:        equ REGBASE+$183 ;can1 bus timing register 1
0184                    CAN1RFLG:        equ REGBASE+$184 ;can1 receiver flags
0185                    CAN1RIER:        equ REGBASE+$185 ;can1 receiver interrupt enables
0186                    CAN1TFLG:        equ REGBASE+$186 ;can1 transmit flags
0187                    CAN1TIER:        equ REGBASE+$187 ;can1 transmit interrupt enables
0188                    CAN1TARQ:        equ REGBASE+$188 ;can1 transmit message abort control
0189                    CAN1TAAK:        equ REGBASE+$189 ;can1 transmit message abort status
018a                    CAN1TBEL:        equ REGBASE+$18a ;can1 transmit buffer select
018b                    CAN1IDAC:        equ REGBASE+$18b ;can1 identfier acceptance control
                        
018e                    CAN1RERR:        equ REGBASE+$18e ;can1 receive error counter
018f                    CAN1TERR:        equ REGBASE+$18f ;can1 transmit error counter
0190                    CAN1IDA0:        equ REGBASE+$190 ;can1 identifier acceptance register 0
0191                    CAN1IDA1:        equ REGBASE+$191 ;can1 identifier acceptance register 1
0192                    CAN1IDA2:        equ REGBASE+$192 ;can1 identifier acceptance register 2
0193                    CAN1IDA3:        equ REGBASE+$193 ;can1 identifier acceptance register 3
0194                    CAN1IDM0:        equ REGBASE+$194 ;can1 identifier mask register 0
0195                    CAN1IDM1:        equ REGBASE+$195 ;can1 identifier mask register 1
0196                    CAN1IDM2:        equ REGBASE+$196 ;can1 identifier mask register 2
0197                    CAN1IDM3:        equ REGBASE+$197 ;can1 identifier mask register 3
0198                    CAN1IDA4:        equ REGBASE+$198 ;can1 identifier acceptance register 4
0199                    CAN1IDA5:        equ REGBASE+$199 ;can1 identifier acceptance register 5
019a                    CAN1IDA6:        equ REGBASE+$19a ;can1 identifier acceptance register 6
019b                    CAN1IDA7:        equ REGBASE+$19b ;can1 identifier acceptance register 7
019c                    CAN1IDM4:        equ REGBASE+$19c ;can1 identifier mask register 4
019d                    CAN1IDM5:        equ REGBASE+$19d ;can1 identifier mask register 5
019e                    CAN1IDM6:        equ REGBASE+$19e ;can1 identifier mask register 6
019f                    CAN1IDM7:        equ REGBASE+$19f ;can1 identifier mask register 7
01a0                    CAN1RXFG:        equ REGBASE+$1a0 ;can1 rx foreground buffer thru +$1af
01b0                    CAN1TXFG:        equ REGBASE+$1b0 ;can1 tx foreground buffer thru +$1bf
                        
01c0                    CAN2CTL0:        equ REGBASE+$1c0 ;can2 control register 0
01c1                    CAN2CTL1:        equ REGBASE+$1c1 ;can2 control register 1
01c2                    CAN2BTR0:        equ REGBASE+$1c2 ;can2 bus timing register 0
01c3                    CAN2BTR1:        equ REGBASE+$1c3 ;can2 bus timing register 1
01c4                    CAN2RFLG:        equ REGBASE+$1c4 ;can2 receiver flags
01c5                    CAN2RIER:        equ REGBASE+$1c5 ;can2 receiver interrupt enables
01c6                    CAN2TFLG:        equ REGBASE+$1c6 ;can2 transmit flags
01c7                    CAN2TIER:        equ REGBASE+$1c7 ;can2 transmit interrupt enables
01c8                    CAN2TARQ:        equ REGBASE+$1c8 ;can2 transmit message abort control
01c9                    CAN2TAAK:        equ REGBASE+$1c9 ;can2 transmit message abort status
01ca                    CAN2TBEL:        equ REGBASE+$1ca ;can2 transmit buffer select
01cb                    CAN2IDAC:        equ REGBASE+$1cb ;can2 identfier acceptance control
                        
01ce                    CAN2RERR:        equ REGBASE+$1ce ;can2 receive error counter
01cf                    CAN2TERR:        equ REGBASE+$1cf ;can2 transmit error counter
01d0                    CAN2IDA0:        equ REGBASE+$1d0 ;can2 identifier acceptance register 0
01d1                    CAN2IDA1:        equ REGBASE+$1d1 ;can2 identifier acceptance register 1
01d2                    CAN2IDA2:        equ REGBASE+$1d2 ;can2 identifier acceptance register 2
01d3                    CAN2IDA3:        equ REGBASE+$1d3 ;can2 identifier acceptance register 3
01d4                    CAN2IDM0:        equ REGBASE+$1d4 ;can2 identifier mask register 0
01d5                    CAN2IDM1:        equ REGBASE+$1d5 ;can2 identifier mask register 1
01d6                    CAN2IDM2:        equ REGBASE+$1d6 ;can2 identifier mask register 2
01d7                    CAN2IDM3:        equ REGBASE+$1d7 ;can2 identifier mask register 3
01d8                    CAN2IDA4:        equ REGBASE+$1d8 ;can2 identifier acceptance register 4
01d9                    CAN2IDA5:        equ REGBASE+$1d9 ;can2 identifier acceptance register 5
01da                    CAN2IDA6:        equ REGBASE+$1da ;can2 identifier acceptance register 6
01db                    CAN2IDA7:        equ REGBASE+$1db ;can2 identifier acceptance register 7
01dc                    CAN2IDM4:        equ REGBASE+$1dc ;can2 identifier mask register 4
01dd                    CAN2IDM5:        equ REGBASE+$1dd ;can2 identifier mask register 5
01de                    CAN2IDM6:        equ REGBASE+$1de ;can2 identifier mask register 6
01df                    CAN2IDM7:        equ REGBASE+$1df ;can2 identifier mask register 7
01e0                    CAN2RXFG:        equ REGBASE+$1e0 ;can2 rx foreground buffer thru +$1ef
01f0                    CAN2TXFG:        equ REGBASE+$1f0 ;can2 tx foreground buffer thru +$1ff
                        
0200                    CAN3CTL0:        equ REGBASE+$200 ;can3 control register 0
0201                    CAN3CTL1:        equ REGBASE+$201 ;can3 control register 1
0202                    CAN3BTR0:        equ REGBASE+$202 ;can3 bus timing register 0
0203                    CAN3BTR1:        equ REGBASE+$203 ;can3 bus timing register 1
0204                    CAN3RFLG:        equ REGBASE+$204 ;can3 receiver flags
0205                    CAN3RIER:        equ REGBASE+$205 ;can3 receiver interrupt enables
0206                    CAN3TFLG:        equ REGBASE+$206 ;can3 transmit flags
0207                    CAN3TIER:        equ REGBASE+$207 ;can3 transmit interrupt enables
0208                    CAN3TARQ:        equ REGBASE+$208 ;can3 transmit message abort control
0209                    CAN3TAAK:        equ REGBASE+$209 ;can3 transmit message abort status
020a                    CAN3TBEL:        equ REGBASE+$20a ;can3 transmit buffer select
020b                    CAN3IDAC:        equ REGBASE+$20b ;can3 identfier acceptance control
                        
020e                    CAN3RERR:        equ REGBASE+$20e ;can3 receive error counter
020f                    CAN3TERR:        equ REGBASE+$20f ;can3 transmit error counter
0210                    CAN3IDA0:        equ REGBASE+$210 ;can3 identifier acceptance register 0
0211                    CAN3IDA1:        equ REGBASE+$211 ;can3 identifier acceptance register 1
0212                    CAN3IDA2:        equ REGBASE+$212 ;can3 identifier acceptance register 2
0213                    CAN3IDA3:        equ REGBASE+$213 ;can3 identifier acceptance register 3
0214                    CAN3IDM0:        equ REGBASE+$214 ;can3 identifier mask register 0
0215                    CAN3IDM1:        equ REGBASE+$215 ;can3 identifier mask register 1
0216                    CAN3IDM2:        equ REGBASE+$216 ;can3 identifier mask register 2
0217                    CAN3IDM3:        equ REGBASE+$217 ;can3 identifier mask register 3
0218                    CAN3IDA4:        equ REGBASE+$218 ;can3 identifier acceptance register 4
0219                    CAN3IDA5:        equ REGBASE+$219 ;can3 identifier acceptance register 5
021a                    CAN3IDA6:        equ REGBASE+$21a ;can3 identifier acceptance register 6
021b                    CAN3IDA7:        equ REGBASE+$21b ;can3 identifier acceptance register 7
021c                    CAN3IDM4:        equ REGBASE+$21c ;can3 identifier mask register 4
021d                    CAN3IDM5:        equ REGBASE+$21d ;can3 identifier mask register 5
021e                    CAN3IDM6:        equ REGBASE+$21e ;can3 identifier mask register 6
021f                    CAN3IDM7:        equ REGBASE+$21f ;can3 identifier mask register 7
0220                    CAN3RXFG:        equ REGBASE+$220 ;can3 rx foreground buffer thru +$22f
0230                    CAN3TXFG:        equ REGBASE+$230 ;can3 tx foreground buffer thru +$23f
                        
0240                    PTT:                equ REGBASE+$240 ;portt data register
0241                    PTIT:                equ REGBASE+$241 ;portt input register
0242                    DDRT:                equ REGBASE+$242 ;portt direction register
0243                    RDRT:                equ REGBASE+$243 ;portt reduced drive register
0244                    PERT:                equ REGBASE+$244 ;portt pull device enable
0245                    PPST:                equ REGBASE+$245 ;portt pull polarity select
                        
0248                    PTS:                equ REGBASE+$248 ;ports data register
0249                    PTIS:                equ REGBASE+$249 ;ports input register
024a                    DDRS:                equ REGBASE+$24a ;ports direction register
024b                    RDRS:                equ REGBASE+$24b ;ports reduced drive register
024c                    PERS:                equ REGBASE+$24c ;ports pull device enable
024d                    PPSS:                equ REGBASE+$24d ;ports pull polarity select
024e                    WOMS:                equ REGBASE+$24e ;ports wired or mode register
                        
0250                    PTM:                equ REGBASE+$250 ;portm data register
0251                    PTIM:                equ REGBASE+$251 ;portm input register
0252                    DDRM:                equ REGBASE+$252 ;portm direction register
0253                    RDRM:                equ REGBASE+$253 ;portm reduced drive register
0254                    PERM:                equ REGBASE+$254 ;portm pull device enable
0255                    PPSM:                equ REGBASE+$255 ;portm pull polarity select
0256                    WOMM:                equ REGBASE+$256 ;portm wired or mode register
0257                    MODRR:                equ REGBASE+$257 ;portm module routing register
                        
0258                    PTP:                equ REGBASE+$258 ;portp data register
0259                    PTIP:                equ REGBASE+$259 ;portp input register
025a                    DDRP:                equ REGBASE+$25a ;portp direction register
025b                    RDRP:                equ REGBASE+$25b ;portp reduced drive register
025c                    PERP:                equ REGBASE+$25c ;portp pull device enable
025d                    PPSP:                equ REGBASE+$25d ;portp pull polarity select
025e                    PIEP:                equ REGBASE+$25e ;portp interrupt enable register
025f                    PIFP:                equ REGBASE+$25f ;portp interrupt flag register
                        
0260                    PTH:                equ REGBASE+$260 ;porth data register
0261                    PTIH:                equ REGBASE+$261 ;porth input register
0262                    DDRH:                equ REGBASE+$262 ;porth direction register
0263                    RDRH:                equ REGBASE+$263 ;porth reduced drive register
0264                    PERH:                equ REGBASE+$264 ;porth pull device enable
0265                    PPSH:                equ REGBASE+$265 ;porth pull polarity select
0266                    PIEH:                equ REGBASE+$266 ;porth interrupt enable register
0267                    PIFH:                equ REGBASE+$267 ;porth interrupt flag register
                        
0268                    PTJ:                equ REGBASE+$268 ;portj data register
0269                    PTIJ:                equ REGBASE+$269 ;portj input register
026a                    DDRJ:                equ REGBASE+$26a ;portj direction register
026b                    RDRJ:                equ REGBASE+$26b ;portj reduced drive register
026c                    PERJ:                equ REGBASE+$26c ;portj pull device enable
026d                    PPSJ:                equ REGBASE+$26d ;portj pull polarity select
026e                    PIEJ:                equ REGBASE+$26e ;portj interrupt enable register
026f                    PIFJ:                equ REGBASE+$26f ;portj interrupt flag register
                        
0280                    CAN4CTL0:        equ REGBASE+$280 ;can4 control register 0
0281                    CAN4CTL1:        equ REGBASE+$281 ;can4 control register 1
0282                    CAN4BTR0:        equ REGBASE+$282 ;can4 bus timing register 0
0283                    CAN4BTR1:        equ REGBASE+$283 ;can4 bus timing register 1
0284                    CAN4RFLG:        equ REGBASE+$284 ;can4 receiver flags
0285                    CAN4RIER:        equ REGBASE+$285 ;can4 receiver interrupt enables
0286                    CAN4TFLG:        equ REGBASE+$286 ;can4 transmit flags
0287                    CAN4TIER:        equ REGBASE+$287 ;can4 transmit interrupt enables
0288                    CAN4TARQ:        equ REGBASE+$288 ;can4 transmit message abort control
0289                    CAN4TAAK:        equ REGBASE+$289 ;can4 transmit message abort status
028a                    CAN4TBEL:        equ REGBASE+$28a ;can4 transmit buffer select
028b                    CAN4IDAC:        equ REGBASE+$28b ;can4 identfier acceptance control
                        
028e                    CAN4RERR:        equ REGBASE+$28e ;can4 receive error counter
028f                    CAN4TERR:        equ REGBASE+$28f ;can4 transmit error counter
0290                    CAN4IDA0:        equ REGBASE+$290 ;can4 identifier acceptance register 0
0291                    CAN4IDA1:        equ REGBASE+$291 ;can4 identifier acceptance register 1
0292                    CAN4IDA2:        equ REGBASE+$292 ;can4 identifier acceptance register 2
0293                    CAN4IDA3:        equ REGBASE+$293 ;can4 identifier acceptance register 3
0294                    CAN4IDM0:        equ REGBASE+$294 ;can4 identifier mask register 0
0295                    CAN4IDM1:        equ REGBASE+$295 ;can4 identifier mask register 1
0296                    CAN4IDM2:        equ REGBASE+$296 ;can4 identifier mask register 2
0297                    CAN4IDM3:        equ REGBASE+$297 ;can4 identifier mask register 3
0298                    CAN4IDA4:        equ REGBASE+$298 ;can4 identifier acceptance register 4
0299                    CAN4IDA5:        equ REGBASE+$299 ;can4 identifier acceptance register 5
029a                    CAN4IDA6:        equ REGBASE+$29a ;can4 identifier acceptance register 6
029b                    CAN4IDA7:        equ REGBASE+$29b ;can4 identifier acceptance register 7
029c                    CAN4IDM4:        equ REGBASE+$29c ;can4 identifier mask register 4
029d                    CAN4IDM5:        equ REGBASE+$29d ;can4 identifier mask register 5
029e                    CAN4IDM6:        equ REGBASE+$29e ;can4 identifier mask register 6
029f                    CAN4IDM7:        equ REGBASE+$29f ;can4 identifier mask register 7
02a0                    CAN4RXFG:        equ REGBASE+$2a0 ;can4 rx foreground buffer thru +$2af
02b0                    CAN4TXFG:        equ REGBASE+$2b0 ;can4 tx foreground buffer thru +$2bf
                        
                        * end registers
                        #endinclude

                        
                        
                        
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;               Definicion de estructuras de datos
                        
                        
                        
000d                    CR:             equ $0D
000a                    LF:             equ $0A
0000                    FIN:            equ $0
                        
1000                                    org $1000
1000                    BANDERAS2:      ds 1    ;7: MOD_H      6:MOD_L    1:Data or Control LCD    0:Cambio_Modo
1001                    BANDERAS1:      ds 1    ;0: TCL_Lista   1:TCL_Leida     2:ARRAY_OK  3:PANT_FLAG     4:ALERTA        5:CALC_TICK
1002                    V_Lim:          ds 1    ;Velocidad limite
1003 02                 MAX_TCL:        db 2
1004                    TECLA:          ds 1
1005                    TECLA_IN:       ds 1
                        
1006                    CONT_REB:       ds 1
1007                    CONT_TCL:       ds 1
1008                    PATRON:         ds 1
                                
                        
1009                    NUM_ARRAY:      ds 2
100b                    BRILLO:         ds 1        ; 0-100 cotrola el brillo de 7 seg
100c                    POT:            ds 1        ;FIXME son variables o constantes
100d                    TICK_EN:        ds 2        ;FIXME son variables o constantes
100f                    TICK_DIS:       ds 2        ;FIXME son variables o constantes
1011                    VELOC:          ds 1
1012                    TICK_VEL:       ds 1
                        
                        
1013                    BIN1:           ds 1        ;corresponde al valor de DISP1 y DISP2 en binario
1014                    BIN2:           ds 1        ;corresponde al valor de DISP4 y DISP3 en binario
                        
1015                    BCD1:           ds 1        ;bin 1 en bcd
1016                    BCD2:           ds 1        ;bin 2 en bcd
1017                    BCD_L:          ds 1
1018                    LOW:            ds 1        ;ni idea
                        
                        
1019                    DISP1:          ds 1        ;izquierda bcd1
101a                    DISP2:          ds 1        ;derecha bcd1
101b                    DISP3:          ds 1        ;izquierda bcd 2
101c                    DISP4:          ds 1        ;derecha bcd2  
                        
101d                    LEDS:           ds 1        ;valor que se envia al puerto B para los leds
                        
101e                    CONT_DIG:       ds 1        ;digito actual de 7seg
101f                    CONT_TICKS:     ds 1        ;
                        
1020                    DT:             ds 1        ;100 - BRILLO, valor donde se resetea CONT_TICKS
                        
                        
1021                    CONT_7SEG:      ds 2        ;cuando llega a 5000 se actualizan los valores de DISP
1023                    CONT_200        ds 1        ;FIXME son variables o constantes
1024                    CONT_DELAY:     ds 1        ;
1025 64                 D2mS:           db 100
1026 0d                 D240uS:         db 13
1027 03                 D60uS:          db 3
                        
1028 01                 Clear_LCD:      db $01      ;constante igual a comando clear
1029 80                 ADD_L1:         db $80      ;constante igual a Adress linea 1 lcd
102a c0                 ADD_L2:         db $C0      ;constante igual a Adress linea 2 lcd
102b                    TEMP:           ds 1
102c                    Variable1:      ds 1
102d                    Variable2:      ds 1
102e                    Variable3:      ds 1
                        
                        
                        
                        
1030                                    org $1030
1030 01 02 03 04 05 06  TECLAS:         db $01,$02,$03,$04,$05,$06,$07,$08,$09,$0B,$00,$0E
     07 08 09 0b 00 0e
                        
                        
                        
                         
1040                                    org $1040
1040 3f 06 5b 4f 66 6d  SEGMENT:        db $3F,$06,$5B,$4F,$66,$6D,$7D,$07,$7F,$6F,$40,$BB  ;0,1,2,3,4,5,6,7,8,9,-,Apagar
     7d 07 7f 6f 40 bb
                                        
                                        
                                        
1050                                    org $1050
                        
                        
1050 04 28 28 06 0c     iniDsp:         db 04,$28,$28,$06,$0C     ;numero de bytes,function set, function set, entry mode, display on off
                        
1060                                    org $1060
1060 20 20 4d 4f 44 4f  MESS1:          fcc "  MODO CONFIG"
     20 43 4f 4e 46 49
     47
106d 00                                 db FIN
106e 20 56 45 4c 4f 43  MESS2:          fcc " VELOC. LIMITE"
     2e 20 4c 49 4d 49
     54 45
107c 00                                 db FIN
107d 20 20 52 41 44 41  MESS3:          fcc "  RADAR   623"
     52 20 20 20 36 32
     33
108a 00                                 db FIN
108b 20 20 20 4d 4f 44  MESS4:          fcc "   MODO LIBRE"
     4f 20 4c 49 42 52
     45
1098 00                                 db FIN
1099 20 4d 4f 44 4f 20  MESS5:          fcc " MODO MEDICION"
     4d 45 44 49 43 49
     4f 4e
10a7 00                                 db FIN
10a8 53 55 20 56 45 4c  MESS6:          fcc "SU VEL. VEL.LIM"
     2e 20 56 45 4c 2e
     4c 49 4d
10b7 00                                 db FIN
10b8 20 20 45 53 50 45  MESS7:          fcc "  ESPERANDO..."
     52 41 4e 44 4f 2e
     2e 2e
10c6 00                                 db FIN                
                        
                        
                        
                        
                        
                                        
                                        
3e70                                    org $3E70
3e70 21 c5                              dw RTI_ISR
3e4c                                    org $3E4C
3e4c 21 6a                              dw PTH_ISR
3e66                                    org $3E66
3e66 21 d1                              dw OC4_ISR
                        
                        ;################################################
                        ;       Programa principal
2000                                    org $2000
                        
                        
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;       Definicion de hardware
                        
                        ;       LEDS
2000 18 0b ff 00 03                     movb #$FF, DDRB
2005 1c 02 6a 02                        bset DDRJ,$02
2009 1c 02 68 02                        bset PTJ, $02
                        
                        ;       7SEG
200d 18 0b 0f 02 5a                     movb #$0F, DDRP
2012 18 0b 0f 02 58                     movb #$0F, PTP
                        ;       Output compare
2017 18 0b 90 00 46                     movb #$90, TSCR1
201c 18 0b 03 00 4d                     movb #$03, TSCR2
2021 18 0b 10 00 40                     movb #$10, TIOS
2026 18 0b 01 00 48                     movb #$01, TCTL1
202b 18 0b 00 00 49                     movb #$00, TCTL2
2030 18 0b 10 00 4c                     movb #$10, TIE
2035 dc 44                              ldd TCNT
2037 c3 00 3c                           addd #60
203a 5c 58                              std TC4
                                        
203c 18 0b ff 00 33                     movb #$FF,DDRK          ;Utilizado en pantala LCD
                        
                        
                        ;       ATD0
                                        ;movb #$C2, ATD0CTL2
                                        ;ldab #200
                        ;loopIATD:       dbne B,loopIATD         ;loop de retardo para encender el convertidor
                         ;               movb #$30, ATD0CTL3
                          ;              movb #$10, ATD0CTL4
                           ;             movb #$87, ATD0CTL5
                        ;       Puerto H sw
                        
                        ;               bset PIEH, $0C          ;habilitar interrupciones PH
2041 1c 02 67 0f                        bset PIFH, $0F
                        ;       RTI                 
2045 18 0b 17 00 3b                     movb #$17, RTICTL       ; esto lo pone en 1.024 ms
204a 4c 38 80                           bset CRGINT, $80        ;habilitar interrupciones rti
                        ;       Puerto A teclado                
204d 18 0b f0 00 02                     movb #$F0, DDRA
2052 4c 0c 01                           bset PUCR, $01          ;Super importante habilitar resistencia de pullup
                        ;                bclr RDRIV, $01
                        
2055 10 ef                              cli
                        
                        
                        
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        
                        ;               inicializacion
2057 cf 3b ff                           lds #$3BFF
205a 18 0b 00 10 15                     movb #$00,BCD1
205f 18 0b 00 10 16                     movb #$00,BCD2
2064 18 0b 00 10 14                     movb #$00,BIN2
2069 18 0b 00 10 13                     movb #$00,BIN1
206e 18 0b 02 10 1d                     movb #02,LEDS
2073 18 0b 00 10 19                     movb #0,DISP1
2078 18 0b 00 10 1a                     movb #0,DISP2
207d 18 0b 00 10 1b                     movb #0,DISP3
2082 18 0b 00 10 1c                     movb #0,DISP4
                                        ;modser=1
2087 18 0b 01 10 1e                     movb #1,CONT_DIG
208c 18 0b 00 10 1f                     movb #0,CONT_TICKS
2091 18 0b 32 10 0b                     movb #50, BRILLO
2096 18 0b 00 10 02                     movb #00, V_LIM
                                        
                        
209b 18 0b ff 10 04                     movb #$FF, TECLA
20a0 18 0b ff 10 05                     movb #$FF, TECLA_IN
20a5 18 0b 00 10 07                     movb #$00, CONT_TCL
20aa 18 0b 00 10 06                     movb #$00, CONT_REB
20af 1d 10 01 07                        bclr BANDERAS1,$07      ;Poner las banderas de teclados en 0 FIXME: esto no considera las nuevas banderas
20b3 1c 10 00 01                        bset BANDERAS2,$01      ;Poner la bandera cambio nodo en 1 y 
20b7 1d 10 00 c0                        bclr BANDERAS2,$C0      ;modo en 11 es decir MODO config
20bb b6 10 03                           ldaa MAX_TCL
20be ce 10 08                           ldx #NUM_ARRAY-1
20c1 18 08 e4 ff        LoopCLR:        movb #$FF,A,X          ;iniciar el arreglo en FF
20c5 04 30 f9                           dbne A,LoopCLR
                        
                        
                        ;       Programa main   
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        mainL:          loc
20c8 f7 10 02                           tst V_LIM
20cb 27 37                              beq chkModoLC           ;Salta a revisar si es modo config o libre
20cd b6 02 61                           ldaa PTIH               ;se cargan los valores de los dipswitch
20d0 84 c0                              anda #$C0               ;Se utilizan solo los bits de modo
20d2 f6 10 00                           ldab BANDERAS2          ;Bits de banderas que corresponden a modos
20d5 c4 c0                              andb #$C0               ;Bits de modo
20d7 18 17                              cba
20d9 27 24                              beq nochange`
20db 81 40                              cmpa #$40               ;se revisa que el modo no sea el valor invalido
20dd 27 20                              beq nochange`                
20df 1c 10 00 01                        bset BANDERAS2,$01      ;Se activa cambio de modo
20e3 81 80                              cmpa #$80               ;Revisar si es modo libre
20e5 27 0a                              beq swML`
20e7 81 c0                              cmpa #$C0
20e9 27 10                              beq swMM`
20eb 1d 10 00 c0                        bclr BANDERAS2,$C0      ;Si los switches estan en modo config se configura en el registro MOD
20ef 20 0e                              bra nochange`
20f1 1c 10 00 80        swML`           bset BANDERAS2,$80      ;Si los switches estan en modo libre se configura en el registro MOD
20f5 1d 10 00 40                        bclr BANDERAS2,$40
20f9 20 04                              bra nochange`
20fb 1c 10 00 c0        swMM`           bset BANDERAS2,$C0      ;Si los switches estan en modo medicion se configura en el registro MOD
                        
20ff 1e 10 00 c0 49     nochange`       brset BANDERAS2,$C0,chkModoM`     ;Salta a revisar el modo Medicion
                                        ;FIXME:Aqui se deben desabilitar las interrupciones
2104 1f 10 00 c0 1c     chkModoLC:      brclr BANDERAS2,$C0,chkModoC`       ;Salta a revisar el modo Config
                        
                        
2109 1f 10 00 01 12     chkModoL`       brclr BANDERAS2,$01,jmodolibre`           ;Tecnicamente aqui deberia saltar a modo libre, pero no hace nada
210e 1d 10 00 01                        bclr BANDERAS2,$01                  
2112 18 0b 04 10 1d                     movb #$04,LEDS                                
2117 ce 10 7d                           ldx #MESS3
211a cd 10 8b                           ldy #MESS4
211d 16 23 ce                           jsr CARGAR_LCD                
2120 16 25 88           jmodolibre`     jsr MODO_LIBRE
2123 20 a3                              bra mainL
                        
2125 1f 10 00 01 1d     chkModoC`       brclr BANDERAS2,$01,jmodoconfig`
212a 1d 10 00 01                        bclr BANDERAS2,$01                                  
212e 18 0c 10 02 10 13                  movb V_LIM,BIN1
2134 18 0b bb 10 14                     movb #$BB,BIN2               
2139 ce 10 60                           ldx #MESS1
213c cd 10 6e                           ldy #MESS2
213f 18 0b 01 10 1d                     movb #$01,LEDS
2144 16 23 ce                           jsr CARGAR_LCD
                                        
                        
2147 16 25 54           jmodoconfig`    jsr MODO_CONFIG
214a 06 20 c8                           jmp mainL
                        
214d                    chkModoM`       ;FIXME:Aqui se deben habilitar las interrupciones
214d 1f 10 00 01 12                     brclr BANDERAS2,$01,jmodormedicion`
2152 1d 10 00 01                        bclr BANDERAS2,$01
2156 18 0b 02 10 1d                     movb #$02,LEDS
215b ce 10 99                           ldx #MESS5
215e cd 10 b8                           ldy #MESS7
2161 16 23 ce                           jsr CARGAR_LCD
2164 16 25 87           jmodormedicion` jsr MODO_MEDICION
2167 06 20 c8                           jmp mainL
                        
                        
                        
                                        
                                        
                        ;################################################################################################################################################################################################
                        ;       Subrutinas
                        
                        
                        
                        
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;################################################################################################################################################################################################
                        ;       Subrutinas de proposito especifico
                        
                        ;       Subrutinas PH
                        ;        subrutina de PHO
                        
                                        loc
216a 1e 02 67 01 0f     PTH_ISR:        brset PIFH,$01,PH0_ISR 
216f 1e 02 67 02 1d                     brset PIFH,$02,PH1_ISR
2174 1e 02 67 04 2a                     brset PIFH,$04,PH2_ISR
2179 1e 02 67 08 35                     brset PIFH,$08,PH3_ISR
                        
                        ;       subrutina PH1
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
217e 1c 02 67 01        PH0_ISR:        bset PIFH, $01                          
2182 f7 10 06                           tst CONT_REB
2185 26 1b                              bne returnPH
                                        
2187 18 0b 32 10 06                     movb #50,CONT_REB
218c 4d 08 04                           bclr PORTE,$04
218f 20 11                              bra returnPH
                        
                        ;       subrutina PH1
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
2191 1c 02 67 02        PH1_ISR:        bset PIFH, $02                          
2195 f7 10 06                           tst CONT_REB
2198 26 08                              bne returnPH
                                        
219a 18 0b 32 10 06                     movb #50,CONT_REB
219f 4d 08 04                           bclr PORTE,$04
21a2 0b                 returnPH:       rti
                        ;       subrutina PH2
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################                
21a3 1c 02 67 04        PH2_ISR:        bset PIFH, $04
21a7 b6 10 0b                           ldaa BRILLO
21aa 27 f6                              beq returnPH
21ac 80 05                              suba #5
21ae 7a 10 0b                           staa BRILLO
21b1 20 ef                              bra returnPH
                        ;       subrutina PH3
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
21b3 1c 02 67 08        PH3_ISR:        bset PIFH, $08
21b7 b6 10 0b                           ldaa BRILLO
21ba 81 64                              cmpa #100
21bc 27 e4                              beq returnPH
21be 8b 05                              adda #5
21c0 7a 10 0b                           staa BRILLO
21c3 20 dd                              bra returnPH                
                        
                        
                        
                        ;       subrutina de rti
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                                        loc
21c5 4c 37 80           RTI_ISR:        bset CRGFLG, $80
21c8 f7 10 06                           tst CONT_REB
21cb 27 03                              beq return`
21cd 73 10 06                           dec CONT_REB
21d0 0b                 return`         rti
                        
                        
                        ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        ;   Subrutina OC4       ;FIXME: hay que cambiarla para decidir cuando se apaga la pantalla
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                                        loc
21d1 b6 10 1f           OC4_ISR:        ldaa CONT_TICKS
21d4 c6 64                              ldab #100
21d6 f0 10 0b                           subb BRILLO
21d9 18 17                              cba
21db 2c 0f                              bge apagar`
21dd f7 10 1f                           tst CONT_TICKS
21e0 27 2c                              beq check_digit`
21e2 81 64              checkN`         cmpa #100
21e4 27 12                              beq changeDigit`
21e6 72 10 1f           incticks`       inc CONT_TICKS
21e9 06 22 8b                           jmp part2`
                        ;Apagar
21ec 18 0b ff 02 58     apagar`         movb #$FF,PTP
21f1 18 0b 00 00 01                     movb #$0, PORTB
21f6 20 ea                              bra checkN`
                        ;           cambiar digito
21f8 18 0b 00 10 1f     changeDigit`    movb #$0, CONT_TICKS
21fd 72 10 1e                           inc CONT_DIG
2200 86 06                              ldaa #6
2202 b1 10 1e                           cmpa CONT_DIG
2205 26 05                              bne jpart2`                 ;no me alcanzo para hacer el primer salto 
2207 18 0b 01 10 1e                     movb #1,CONT_DIG
220c 20 7d              jpart2`         bra part2`
                        ;           encender digito
220e b6 10 1e           check_digit`    ldaa CONT_DIG
2211 81 01                              cmpa #1
2213 26 17                              bne dig2`
2215 b6 10 19                           ldaa DISP1
2218 81 bb                              cmpa #$BB
221a 27 0e                              beq ndig1`
221c 1d 02 58 08                        bclr PTP, $08
2220 18 0c 10 19 00 01                  movb DISP1, PORTB
2226 1c 02 68 02                        bset PTJ, $02
222a 20 ba              ndig1`          bra  incticks`
222c 81 02              dig2`           cmpa #2
222e 26 17                              bne dig3`
2230 1d 02 58 04                        bclr PTP, $04
2234 b6 10 1a                           ldaa DISP2
2237 81 bb                              cmpa #$BB
2239 27 0a                              beq ndig2`
223b 18 0c 10 1a 00 01                  movb DISP2, PORTB
2241 1c 02 68 02                        bset PTJ, $02
2245 20 9f              ndig2`          bra  incticks`
2247 81 03              dig3`           cmpa #3
2249 26 17                              bne dig4`
224b b6 10 1b                           ldaa DISP3
224e 81 bb                              cmpa #$BB
2250 27 0e                              beq ndig3`
2252 1d 02 58 02                        bclr PTP, $02                                
2256 18 0c 10 1b 00 01                  movb DISP3, PORTB
225c 1c 02 68 02                        bset PTJ, $02
2260 20 84              ndig3`          bra  incticks`
2262 81 04              dig4`           cmpa #4
2264 26 18                              bne digleds`                                          
2266 b6 10 1c                           ldaa DISP4
2269 81 3f                              cmpa #$3F
226b 27 0e                              beq ndig4`
226d 1d 02 58 01                        bclr PTP, $01  
2271 18 0c 10 1c 00 01                  movb DISP4, PORTB
2277 1c 02 68 02                        bset PTJ, $02
227b 06 21 e6           ndig4`          jmp  incticks`
227e 18 0c 10 1d 00 01  digleds`        movb LEDS, PORTB
2284 1d 02 68 02                        bclr PTJ, $02
2288 72 10 1f                           inc CONT_TICKS
                        
                        
228b f7 10 24           part2`          tst CONT_DELAY
228e 27 03                              beq tst7seg`
2290 73 10 24                           dec CONT_DELAY
2293 fe 10 21           tst7seg`        ldx CONT_7SEG
2296 27 0f                              beq JBCD_7SEG`
2298 09                                 dex
2299 7e 10 21                           stx CONT_7SEG
229c 16 24 a1           returnOC4       jsr CONV_BIN_BCD
229f dc 44                              ldd TCNT
22a1 c3 00 3c                           addd #60
22a4 5c 58                              std TC4
22a6 0b                                 rti
22a7 18 03 13 88 10 21  JBCD_7SEG`      movw #5000,CONT_7SEG
22ad 16 23 a8                           jsr BCD_7SEG
22b0 20 ea                              bra returnOC4
                        
                        
                        ;################################################
                        ;################################################
                        ;################################################
                        ;################################################
                        ;       Subrutinas Generales
                        
                        
                        ;       Subrutina Tarea Teclado
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        
                        TAREA_TECLADO:  loc
22b2 f7 10 06                           tst CONT_REB
22b5 26 47                              bne return`
22b7 16 22 ff                           jsr MUX_TECLADO
22ba b6 10 04                           ldaa TECLA
22bd 81 ff                              cmpa #$FF
22bf 27 31                              beq checkLista`
22c1 1e 10 01 02 11                     brset BANDERAS1,$02,checkLeida`        ;revision de bandera Tecla leida
22c6 18 0c 10 04 10 05                  movb TECLA,TECLA_IN
22cc 1c 10 01 02                        bset BANDERAS1,$02
22d0 18 0b 0a 10 06                     movb #10,CONT_REB                       ;iniciar contador de rebotes
22d5 20 27                              bra return`
22d7 b1 10 05           checkLeida`     cmpa TECLA_IN                           ;Comparar Tecla con tecla_in
22da 26 06                              bne Diferente`
22dc 1c 10 01 01                        bset BANDERAS1,$01
22e0 20 1c                              bra return`
22e2 18 0b ff 10 04     Diferente`      movb #$FF,TECLA                         ;Las teclas son invalidas
22e7 18 0b ff 10 05                     movb #$FF,TECLA_IN
22ec 1d 10 01 03                        bclr BANDERAS1,$03
22f0 20 0c                              bra return`
22f2 1f 10 01 01 07     checkLista`     brclr BANDERAS1,$01,return`              ;el numero esta listo
22f7 1d 10 01 03                        bclr BANDERAS1,$03
22fb 16 23 6a                           jsr FORMAR_ARRAY
22fe 3d                 return`         rts
                        
                        
                        
                        ;       Subrutina MUX_TECLADO
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        MUX_TECLADO:    loc
22ff c6 00                              ldab #0
2301 18 0b 00 10 08                     movb #0,PATRON
2306 ce 10 30                           ldx #TECLAS
2309 f7 10 08           mainloop`       tst PATRON
230c 26 07                              bne p1
230e 18 0b ef 00 00                     movb #$EF,PORTA
2313 20 26                              bra READ
2315 86 01              p1:             ldaa #1
2317 b1 10 08                           cmpa PATRON
231a 26 07                              bne p2
231c 18 0b df 00 00                     movb #$DF,PORTA
2321 20 18                              bra READ
2323 42                 p2:             inca                    ;A=2
2324 b1 10 08                           cmpa PATRON
2327 26 07                              bne p3
2329 18 0b bf 00 00                     movb #$BF,PORTA
232e 20 0b                              bra READ
2330 42                 p3:             inca                    ;A=3
2331 b1 10 08                           cmpa PATRON             ;Se detecta cual patron se debe usar en la salida
2334 26 27                              bne nk
2336 18 0b 7f 00 00                     movb #$7F,PORTA
233b a7                 read:           nop
233c a7                                 nop
233d a7                                 nop
233e a7                                 nop
233f a7                                 nop
2340 a7                                 nop
2341 a7                                 nop
2342 a7                                 nop
2343 a7                                 nop
2344 a7                                 nop
2345 a7                                 nop
2346 a7                                 nop
2347 a7                                 nop
2348 a7                                 nop                     ;corrige problema de primera fila
2349 4f 00 01 17                        brclr PORTA,$01, treturn`       ;se leen las entradas para encontrar la tecla presionada
234d 52                                 incb
234e 4f 00 02 12                        brclr PORTA,$02, treturn`
2352 52                                 incb
2353 4f 00 04 0d                        brclr PORTA,$04, treturn`
2357 52                                 incb
2358 72 10 08                           inc PATRON
235b 20 ac                              bra mainloop`
235d 18 0b ff 10 04     nk              movb #$FF,TECLA                 ;Se guarda la tecla o se retorna FF
2362 20 05                              bra return`
2364 18 0d e5 10 04     treturn`        movb B,X,TECLA
2369 3d                 return`         rts
                        ;       Subrutina formar array
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        
                        FORMAR_ARRAY:   loc
236a ce 10 09                           ldx #NUM_ARRAY
236d b6 10 05                           ldaa TECLA_IN
2370 f6 10 07                           ldab CONT_TCL
2373 27 0f                              beq check_MAX`
2375 81 0e                              cmpa #$0E
2377 27 1b                              beq t_enter`
2379 81 0b                              cmpa #$0B
237b 27 22                              beq t_borrar`
237d f1 10 03                           cmpb MAX_TCL
2380 27 25                              beq return`
2382 20 08                              bra guardar`
2384 81 0e              check_MAX`      cmpa #$0E
2386 27 1f                              beq return`
2388 81 0b                              cmpa #$0B
238a 27 1b                              beq return`
238c 6a e5              guardar`        staa B,X
238e 52                                 incb
238f 7b 10 07                           stab CONT_TCL
2392 20 13                              bra return`
2394 1c 10 01 04        t_enter`        bset BANDERAS1,$04
2398 18 0b 00 10 07                     movb #$0,CONT_TCL
239d 20 08                              bra return`
239f 53                 t_borrar`       decb
23a0 18 08 e5 ff                        movb #$FF,B,X
23a4 7b 10 07                           stab CONT_TCL
23a7 3d                 return`         rts
                        
                        
                        
                        
                        ;       BCD_7SEG
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        BCD_7SEG:       loc
23a8 ce 10 40                           ldx #SEGMENT
23ab cd 10 19                           ldy #DISP1
23ae 86 00                              ldaa #0
23b0 f6 10 15                           ldab BCD1
23b3 20 03                              bra subrutinabcd`
23b5 f6 10 16           loadBCD2`       ldab BCD2
23b8 37                 subrutinabcd`   pshb 
23b9 c4 0f                              andb #$0F
23bb 18 0a e5 70                        movb B,X,1,Y+      ;muevo la parte baja de bcd a disp2 o disp 4
23bf 33                                 pulb 
23c0 54                                 lsrb
23c1 54                                 lsrb
23c2 54                                 lsrb
23c3 54                                 lsrb
23c4 18 0a e5 70                        movb B,X,1,Y+     ;muevo la parte alta de bcd a disp 1 o disp4
23c8 8d 10 1b                           cpy #DISP3
23cb 27 e8                              beq loadBCD2`
23cd 3d                 returnBCD_7SEG: rts
                        
                        
                        ;       CARGAR_LCD
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        CARGAR_LCD:     loc
23ce 34                                 pshx
23cf ce 10 50                           ldx #iniDsp
23d2 e6 30                              ldab 1,X+
23d4 a6 30              loop1`          ldaa 1,X+
23d6 1d 10 00 02                        bclr BANDERAS2,$02
23da 16 24 54                           jsr Send
23dd 18 0c 10 27 10 24                  movb D60uS,CONT_DELAY
23e3 16 24 9b                           jsr Delay
23e6 04 31 eb                           dbne B,loop1`           ;hasta aqui se estan mandando los comando iniciales de dsp
23e9 1d 10 00 02                        bclr BANDERAS2,$02
23ed b6 10 28                           ldaa Clear_LCD
23f0 16 24 54                           jsr Send                ;hasta aqui se borra la pantalla
23f3 18 0c 10 25 10 24                  movb D2mS,CONT_DELAY
23f9 16 24 9b                           jsr Delay
23fc 30                                 pulx
23fd b6 10 29                           ldaa ADD_L1                        ;aqui empieza cargar lcd
2400 1d 10 00 02                        bclr BANDERAS2,$02
2404 16 24 54                           jsr Send
2407 18 0c 10 27 10 24                  movb D60uS,CONT_DELAY
240d 16 24 9b                           jsr Delay
2410 a6 30              loop2`          ldaa 1,X+
2412 81 00                              cmpa #FIN
2414 27 12                              beq linea2`
2416 1c 10 00 02                        bset BANDERAS2,$02
241a 16 24 54                           jsr Send
241d 18 0c 10 27 10 24                  movb D60uS,CONT_DELAY
2423 16 24 9b                           jsr Delay
2426 20 e8                              bra loop2`
2428 b6 10 2a           linea2`         ldaa ADD_L2                        ;aqui empieza cargar la linea 2
242b 1d 10 00 02                        bclr BANDERAS2,$02
242f 16 24 54                           jsr Send
2432 18 0c 10 27 10 24                  movb D60uS,CONT_DELAY
2438 16 24 9b                           jsr Delay
243b a6 70              loop3`          ldaa 1,Y+
243d 81 00                              cmpa #FIN
243f 27 12                              beq returnLCD`
2441 1c 10 00 02                        bset BANDERAS2,$02
2445 16 24 54                           jsr Send
2448 18 0c 10 27 10 24                  movb D60uS,CONT_DELAY
244e 16 24 9b                           jsr Delay
2451 20 e8                              bra loop3`
2453 3d                 returnLCD`      rts
                        
                        
                        ;       Send
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;       Banderas.1: Indica si es un comando o datos
                        ;Salida:
                        ;################################################################################################################################################
                                        loc
2454 36                 Send:           psha
2455 84 f0                              anda #$F0
2457 44                                 lsra
2458 44                                 lsra
2459 5a 32                              staa PORTK
245b 1e 10 00 02 05                     brset BANDERAS2,$02,dato1`
2460 4d 32 01                           bclr PORTK,$01
2463 20 03                              bra continue1`
2465 4c 32 01           dato1`           bset PORTK,$01
2468 4c 32 02           continue1`      bset PORTK,$02
246b 18 0c 10 26 10 24                  movb D240uS,CONT_DELAY
2471 16 24 9b                           jsr Delay
2474 4d 32 02                           bclr PORTK,$02
2477 32                                 pula
2478 84 0f                              anda #$0F
247a 48                                 lsla
247b 48                                 lsla
247c 5a 32                              staa PORTK
247e 1e 10 00 02 05                     brset BANDERAS2,$02,dato2`
2483 4d 32 01                           bclr PORTK,$01
2486 20 03                              bra continue2`
2488 4c 32 01           dato2`          bset PORTK,$01
248b 4c 32 02           continue2`      bset PORTK,$02
248e 18 0c 10 26 10 24                  movb D240uS,CONT_DELAY
2494 16 24 9b                           jsr Delay
2497 4d 32 02                           bclr PORTK,$02
249a 3d                                 rts    
                        
                        ;       Delay
                                        loc
249b f7 10 24           Delay:          tst CONT_DELAY 
249e 26 fb                              bne Delay
24a0 3d                                 rts
                        
                        ;       CONV_BIN_BCD
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                                        loc
24a1 b6 10 13           CONV_BIN_BCD:   ldaa BIN1
24a4 81 bb                              cmpa #$BB
24a6 26 07                              bne cont1`
24a8 18 0b bb 10 15                     movb #$BB,BCD1
24ad 20 14                              bra next`
24af 81 bb              cont1`          cmpa #$BB
24b1 26 07                              bne cont2`
24b3 18 0b bb 10 15                     movb #$BB,BCD1
24b8 20 09                              bra next`
24ba 16 24 e6           cont2`          jsr BIN_BCD
24bd 18 0c 10 17 10 15                  movb BCD_L,BCD1
24c3 b6 10 14           next`           ldaa BIN2
24c6 81 bb                              cmpa #$BB
24c8 26 07                              bne cont3`
24ca 18 0b bb 10 16                     movb #$BB,BCD2
24cf 20 14                              bra return`
24d1 81 bb              cont3`          cmpa #$BB
24d3 26 07                              bne cont4`
24d5 18 0b bb 10 16                     movb #$BB,BCD2
24da 20 09                              bra return`
24dc 16 24 e6           cont4`          jsr BIN_BCD
24df 18 0c 10 17 10 16                  movb BCD_L,BCD2                                
24e5 3d                 return`         rts
                        
                        ;       BIN_BCD
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;       R1
                        ;Salida: 
                        ;       BCD_L        
                        ;################################################################################################################################################
                                        loc
24e6 c6 07              BIN_BCD:        ldab #7
24e8 18 0b 00 10 17                     movb #0,BCD_L
24ed ce 10 17                           ldx #BCD_L        
24f0 48                 loop`           lsla
24f1 65 00                              rol 0,X
24f3 7a 10 2b                           staa TEMP
24f6 a6 00                              ldaa 0,X
24f8 84 0f                              anda #$0F
24fa 81 05                              cmpa #5
24fc 2d 02                              blt continue1`
24fe 8b 03                              adda #3
2500 7a 10 18           continue1`      staa LOW 
2503 a6 00                              ldaa 0,X
2505 84 f0                              anda #$F0
2507 81 50                              cmpa #$50
2509 2d 02                              blt continue2`
250b 8b 30                              adda #$30
250d bb 10 18           continue2`      adda LOW
2510 6a 00                              staa 0,X
2512 b6 10 2b                           ldaa TEMP
2515 53                                 decb
2516 c1 00                              cmpb #$0 
2518 26 d6                              bne loop`
251a 48                                 lsla
251b 65 00                              rol 0,X                           
251d 3d                                 rts
                        
                        ;       BCD_BIN
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                                        loc
251e ce 10 09           BCD_BIN:        ldx #NUM_ARRAY
2521 a6 01                              ldaa 1,X
2523 81 ff                              cmpa #$FF       ;verifica que el segundo numero no sea FF
2525 27 22                              beq wrong`
2527 86 00                              ldaa #0
2529 81 00              loop`           cmpa #0
252b 27 04                              beq mul10`;
252d eb e4                              addb A,X    
252f 20 09                              bra sumarA`
2531 e6 e4              mul10`          ldab A,X
2533 58                                 lslb
2534 58                                 lslb
2535 58                                 lslb        ;mult por 8
2536 eb e4                              addb A,X
2538 eb e4                              addb A,X    ;mult por 10
253a 18 08 e4 ff        sumarA`         movb #$FF,A,X
253e 42                                 inca
253f b1 10 03                           cmpa MAX_TCL
2542 26 e5                              bne loop`
2544 7b 10 02                           stab V_LIM 
2547 20 0a                              bra return`
2549 18 0b ff 10 09     wrong`          movb #$FF,NUM_ARRAY
254e 18 0b 00 10 02                     movb #$0,V_LIM
2553 3d                 return`         rts
                        
                        ;       MODO_CONFIG
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        MODO_CONFIG:    loc
2554 1d 02 66 03                        bclr PIEH,$03
2558 1f 10 01 04 1f                     brclr BANDERAS1,$04,jtarea_teclado`
255d 16 25 1e                           jsr BCD_BIN
2560 1d 10 01 04                        bclr BANDERAS1,$04
2564 b6 10 02                           ldaa V_LIM
2567 81 5a                              cmpa #90
2569 2e 16                              bgt resetV_LIM`
256b 81 2d                              cmpa #45
256d 2d 12                              blt resetV_LIM`
256f 18 0c 10 02 10 13                  movb V_LIM,BIN1
2575 18 0b bb 10 14                     movb #$BB,BIN2
257a 20 0a                              bra returnCofig
257c 16 22 b2           jtarea_teclado` jsr TAREA_TECLADO
257f 20 05                              bra returnCofig
2581 18 0b 00 10 02     resetV_LIM`     movb #0,V_LIM
2586 3d                 returnCofig:    rts
                        
                        ;       MODO_MEDICION
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        MODO_MEDICION:  loc
2587 3d                                 rts
                        
                        ;       MODO_LIBRE
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        MODO_LIBRE:     loc
2588 18 0b bb 10 13                     movb #$BB,BIN1
258d 18 0b bb 10 14                     movb #$BB,BIN2
2592 3d                                 rts
                        
                        
                        

Executed: Sat Nov 23 22:27:46 2019
Total cycles: 1578, Total bytes: 1572
Total errors: 0, Total warnings: 0
