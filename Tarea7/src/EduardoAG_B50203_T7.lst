
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;#################################################################
                        ;
                        ;
                        ;               Tarea 7
                        ;               Eduardo Alfaro Gonzalez
                        ;               B50203
                        ;               IIC 
                        ;               Ultima vez modificado 30/11/19
                        ;
                        ;
                        ;#################################################################
                        #include registers.inc
                        ; Memory maps and register equates
                        ; Choose one of DBUG12MAP (normal operation under DBUG12)
                        ;               EEPROMMAP  (DBUG12 in EEPROM mode)
                        ;               FLASHMAP   (Program loaded into Flash ROM)
0000                    DBUG12MAP equ 0        ; Memory mode is DBUG12MAP
                        ; EEPROMMAP equ 0         ; Memory mode is EEPROMMAP
                        #ifdef DBUG12MAP
0000                    REGBASE        equ        $0        ; register base
1000                    DATASTART equ        $1000        ; Start of data memory
2000                    DATAEND  equ        $2000        ; Stack pointer initial value (end of data RAM area)
2000                    PRSTART equ        $2000        ; Start of program memory (might be ROM)
3bff                    PREND        equ        $3BFF        ; End of program memory
                        
                        ; Functions in D-Bug12
ee84                    Getchar        equ        $EE84        ; Implemented in emulator
ee86                    Putchar equ        $EE86   ; Implemented in emulator
ee88                    Printf  equ     $EE88
ee8a                    GetCmdLine equ  $EE8A   ; FAR call
ee8e                    Sscanhex equ        $EE8E   ; FAR call
ee92                    Isxdigit equ    $EE92
ee94                    Toupper equ     $EE94
ee96                    Isalpha equ     $EE96
ee98                    Strlen  equ     $EE98
ee9a                    Strcpy  equ     $EE9A
ee9c                    Out2hex equ     $EE9C   ; FAR call
eea0                    Out4hex equ     $EEA0   ; FAR call
eea4                    SetUserVector equ $EEA4 ; No longer used
eea6                    WriteEEByte equ $EEA6   ; FAR call
eeaa                    EraseEE equ     $EEAA   ; FAR call
eeae                    ReadMem equ     $EEAE   ; FAR call
eeb2                    WriteMem equ    $EEB2   ; FAR call
                        
3e00                    VECTORTABLE equ $3E00        ; Vectors go here SHOULD ALSO INITIALIZE AT RUNTIME
0000                    STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
0000                    INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef EEPROMMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $3E00        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $400        ; Start of program memory
                        PREND        equ        $FFF        ; End of program memory
                        
                        VECTORTABLE equ $3E00        ; Vectors go here -- MUST BE INITIALIZED AT RUNTIME
                        INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef FLASHMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $4000        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $8000        ; Start of program memory
                        ; Note -- there are problems using the current free assemblers with paged memory
                        ; Best bet is to use logical addresses $8000 up only, set page register to 3E,
                        ; Change S1 records for $8000-BFFF to S2 records for page 3E and S1 records for $C000-$EFFF to
                        ; page 3F. Program startup vector goes in EFFE, and needs to be iin page 3F so PPAGE can be changed. 
                        PREND        equ        $EF7F        ; End of program memory
                        
                        VECTORTABLE equ $EF80        ; Vectors go here -- MUST BE INITIALIZED STATICALLY
                        STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
                        #endif
                        
                        
1000                    RAMSTART equ        DATASTART ; For compatibility
2000                    RAMEND equ        DATAEND   
                        
3e00                    UserRsrv0x80 equ (0*2)+VECTORTABLE
3e02                    UserRsrv0x82 equ (1*2)+VECTORTABLE
3e04                    UserRsrv0x84 equ (2*2)+VECTORTABLE
3e06                    UserRsrv0x86 equ (3*2)+VECTORTABLE
3e08                    UserRsrv0x88 equ (4*2)+VECTORTABLE
3e0a                    UserRsrv0x8a equ (5*2)+VECTORTABLE
3e0c                    UserPWMShDn equ (6*2)+VECTORTABLE
3e0e                    UserPortP equ (7*2)+VECTORTABLE
3e10                    UserMSCAN4Tx equ (8*2)+VECTORTABLE
3e12                    UserMSCAN4Rx equ (9*2)+VECTORTABLE
3e14                    UserMSCAN4Errs equ (10*2)+VECTORTABLE
3e16                    UserMSCAN4Wake equ (11*2)+VECTORTABLE
3e18                    UserMSCAN3Tx equ (12*2)+VECTORTABLE
3e1a                    UserMSCAN3Rx equ (13*2)+VECTORTABLE
3e1c                    UserMSCAN3Errs equ (14*2)+VECTORTABLE
3e1e                    UserMSCAN3Wake equ (15*2)+VECTORTABLE
3e20                    UserMSCAN2Tx equ (16*2)+VECTORTABLE
3e22                    UserMSCAN2Rx equ (17*2)+VECTORTABLE
3e24                    UserMSCAN2Errs equ (18*2)+VECTORTABLE
3e26                    UserMSCAN2Wake equ (19*2)+VECTORTABLE
3e28                    UserMSCAN1Tx equ (20*2)+VECTORTABLE
3e2a                    UserMSCAN1Rx equ (21*2)+VECTORTABLE
3e2c                    UserMSCAN1Errs equ (22*2)+VECTORTABLE
3e2e                    UserMSCAN1Wake equ (23*2)+VECTORTABLE
3e30                    UserMSCAN0Tx equ (24*2)+VECTORTABLE
3e32                    UserMSCAN0Rx equ (25*2)+VECTORTABLE
3e34                    UserMSCAN0Errs equ (26*2)+VECTORTABLE
3e36                    UserMSCAN0Wake equ (27*2)+VECTORTABLE
3e38                    UserFlash equ (28*2)+VECTORTABLE
3e3a                    UserEEPROM equ (29*2)+VECTORTABLE
3e3c                    UserSPI2 equ (30*2)+VECTORTABLE
3e3e                    UserSPI1 equ (31*2)+VECTORTABLE
3e40                    UserIIC equ (32*2)+VECTORTABLE
3e42                    UserDLC equ (33*2)+VECTORTABLE
3e44                    UserSCME equ (34*2)+VECTORTABLE
3e46                    UserCRG equ (35*2)+VECTORTABLE
3e48                    UserPAccBOv equ (36*2)+VECTORTABLE
3e4a                    UserModDwnCtr equ (37*2)+VECTORTABLE
3e4c                    UserPortH equ (38*2)+VECTORTABLE
3e4e                    UserPortJ equ (39*2)+VECTORTABLE
3e50                    UserAtoD1 equ (40*2)+VECTORTABLE
3e52                    UserAtoD0 equ (41*2)+VECTORTABLE
3e54                    UserSCI1 equ (42*2)+VECTORTABLE
3e56                    UserSCI0 equ (43*2)+VECTORTABLE
3e58                    UserSPI0 equ (44*2)+VECTORTABLE
3e5a                    UserPAccEdge equ (45*2)+VECTORTABLE
3e5c                    UserPAccOvf equ (46*2)+VECTORTABLE
3e5e                    UserTimerOvf equ (47*2)+VECTORTABLE
3e60                    UserTimerCh7 equ (48*2)+VECTORTABLE
3e62                    UserTimerCh6 equ (49*2)+VECTORTABLE
3e64                    UserTimerCh5 equ (50*2)+VECTORTABLE
3e66                    UserTimerCh4 equ (51*2)+VECTORTABLE
3e68                    UserTimerCh3 equ (52*2)+VECTORTABLE
3e6a                    UserTimerCh2 equ (53*2)+VECTORTABLE
3e6c                    UserTimerCh1 equ (54*2)+VECTORTABLE
3e6e                    UserTimerCh0 equ (55*2)+VECTORTABLE
3e70                    UserRTI equ (56*2)+VECTORTABLE
3e72                    UserIRQ equ (57*2)+VECTORTABLE
3e74                    UserXIRQ equ (58*2)+VECTORTABLE
3e76                    UserSWI equ (59*2)+VECTORTABLE
3e78                    UserTrap equ (60*2)+VECTORTABLE
                        
                        
                        *
                        *
                        *  HC12 i/o register locations (9s12dp256)
                        *
                        *
0000                    PORTA:          equ REGBASE+0   ;port a = address lines a8 - a15
0001                    PORTB:          equ REGBASE+1   ;port b = address lines a0 - a7
0002                    DDRA:           equ REGBASE+2   ;port a direction register
0003                    DDRB:           equ REGBASE+3   ;port b direction register
                        
0008                    PORTE:          equ REGBASE+8   ;port e = mode,irq and control signals
0009                    DDRE:           equ REGBASE+9   ;port e direction register
000a                    PEAR:           equ REGBASE+$a  ;port e assignments
000b                    MODE:           equ REGBASE+$b  ;mode register
000c                    PUCR:           equ REGBASE+$c  ;port pull-up control register
000d                    RDRIV:          equ REGBASE+$d  ;port reduced drive control register
000e                    EBICTL:                equ REGBASE+$e  ;e stretch control
                        
0010                    INITRM:         equ REGBASE+$10 ;ram location register
0011                    INITRG:         equ REGBASE+$11 ;register location register
0012                    INITEE:         equ REGBASE+$12 ;eeprom location register
0013                    MISC:           equ REGBASE+$13 ;miscellaneous mapping control
0014                    MTST0:          equ REGBASE+$14 ; reserved
0015                    ITCR:           equ REGBASE+$15 ;interrupt test control register
0016                    ITEST:          equ REGBASE+$16 ;interrupt test register
0017                    MTST1:          equ REGBASE+$17 ; reserved
                        
001a                    PARTIDH:        equ REGBASE+$1a ;part id high
001b                    PARTIDL:        equ REGBASE+$1b ;part id low
001c                    MEMSIZ0:        equ REGBASE+$1c ;memory size
001d                    MEMSIZ1:        equ REGBASE+$1d ;memory size
001e                    IRQCR:          equ REGBASE+$1e ;interrupt control register
001e                    INTCR:          equ REGBASE+$1e ;interrupt control register (old name)
001f                    HPRIO:          equ REGBASE+$1f ;high priority reg
                        
0028                    BKPCT0:         equ REGBASE+$28 ;break control register
0029                    BKPCT1:         equ REGBASE+$29 ;break control register
002a                    BKP0X:          equ REGBASE+$2a ; break 0 index register
002b                    BKP0H:          equ REGBASE+$2b ; break 0 pointer high
002c                    BRP0L:          equ REGBASE+$2c ; break 0 pointer low
002d                    BKP1X:          equ REGBASE+$2d ; break 1 index register
002e                    BKP1H:          equ REGBASE+$2e ; break 1 pointer high
002f                    BRP1L:          equ REGBASE+$2f ; break 1 pointer low
0030                    PPAGE:                equ REGBASE+$30 ;program page register
                        
0032                    PORTK:                equ REGBASE+$32 ;port k data
0033                    DDRK:                equ REGBASE+$33 ;port k direction
                        
0034                    SYNR:           equ REGBASE+$34 ; synthesizer / multiplier register
0035                    REFDV:          equ REGBASE+$35 ; reference divider register
0036                    CTFLG:          equ REGBASE+$36 ; reserved
0037                    CRGFLG:         equ REGBASE+$37 ; pll flags register
0038                    CRGINT:         equ REGBASE+$38 ; pll interrupt register
0039                    CLKSEL:         equ REGBASE+$39 ; clock select register
003a                    PLLCTL:         equ REGBASE+$3a ; pll control register
003b                    RTICTL:         equ REGBASE+$3b ;real time interrupt control
003c                    COPCTL:         equ REGBASE+$3c ;watchdog control
003d                    FORBYP:         equ REGBASE+$3d ;
003e                    CTCTL:          equ REGBASE+$3e ;
003f                    ARMCOP:         equ REGBASE+$3f ;cop reset register
                        
0040                    TIOS:           equ REGBASE+$40 ;timer input/output select
0041                    CFORC:          equ REGBASE+$41 ;timer compare force
0042                    OC7M:           equ REGBASE+$42 ;timer output compare 7 mask
0043                    OC7D:           equ REGBASE+$43 ;timer output compare 7 data
0044                    TCNT:           equ REGBASE+$44 ;timer counter register hi
                        *TCNT:          equ REGBASE+$45 ;timer counter register lo
0046                    TSCR:           equ REGBASE+$46 ;timer system control register (Old Name)
0046                    TSCR1:          equ REGBASE+$46 ;timer system control register
0047                    TTOV:           equ REGBASE+$47 ;reserved
0048                    TCTL1:          equ REGBASE+$48 ;timer control register 1
0049                    TCTL2:          equ REGBASE+$49 ;timer control register 2
004a                    TCTL3:          equ REGBASE+$4a ;timer control register 3
004b                    TCTL4:          equ REGBASE+$4b ;timer control register 4
004c                    TMSK1:          equ REGBASE+$4c ;timer interrupt mask 1 (Old Name)
004c                    TIE:            equ REGBASE+$4c ;timer interrupt mask 1
004d                    TMSK2:          equ REGBASE+$4d ;timer interrupt mask 2 (Old Name)
004d                    TSCR2:          equ REGBASE+$4d ;timer interrupt mask 2
004e                    TFLG1:          equ REGBASE+$4e ;timer flags 1
004f                    TFLG2:          equ REGBASE+$4f ;timer flags 2
0050                    TC0:            equ REGBASE+$50 ;timer capture/compare register 0
0052                    TC1:            equ REGBASE+$52 ;timer capture/compare register 1
0054                    TC2:            equ REGBASE+$54 ;timer capture/compare register 2
0056                    TC3:            equ REGBASE+$56 ;timer capture/compare register 3
0058                    TC4:            equ REGBASE+$58 ;timer capture/compare register 4
005a                    TC5:            equ REGBASE+$5a ;timer capture/compare register 5
005c                    TC6:            equ REGBASE+$5c ;timer capture/compare register 6
005e                    TC7:            equ REGBASE+$5e ;timer capture/compare register 7
0060                    PACTL:          equ REGBASE+$60 ;pulse accumulator controls
0061                    PAFLG:          equ REGBASE+$61 ;pulse accumulator flags
0062                    PACN3:          equ REGBASE+$62 ;pulse accumulator counter 3
0063                    PACN2:          equ REGBASE+$63 ;pulse accumulator counter 2
0064                    PACN1:          equ REGBASE+$64 ;pulse accumulator counter 1
0065                    PACN0:          equ REGBASE+$65 ;pulse accumulator counter 0
0066                    MCCTL:          equ REGBASE+$66 ;modulus down conunter control
0067                    MCFLG:          equ REGBASE+$67 ;down counter flags
0068                    ICPAR:          equ REGBASE+$68 ;input pulse accumulator control
0069                    DLYCT:          equ REGBASE+$69 ;delay count to down counter
006a                    ICOVW:          equ REGBASE+$6a ;input control overwrite register
006b                    ICSYS:          equ REGBASE+$6b ;input control system control
                        
006d                    TIMTST:         equ REGBASE+$6d ;timer test register
                        
0070                    PBCTL:          equ REGBASE+$70 ; pulse accumulator b control
0071                    PBFLG:          equ REGBASE+$71 ; pulse accumulator b flags
0072                    PA3H:           equ REGBASE+$72 ; pulse accumulator holding register 3
0073                    PA2H:           equ REGBASE+$73 ; pulse accumulator holding register 2
0074                    PA1H:           equ REGBASE+$74 ; pulse accumulator holding register 1
0075                    PA0H:           equ REGBASE+$75 ; pulse accumulator holding register 0
0076                    MCCNT:          equ REGBASE+$76 ; modulus down counter register
                        *MCCNTL:        equ REGBASE+$77 ; low byte
0078                    TCOH:           equ REGBASE+$78 ; capture 0 holding register
007a                    TC1H:           equ REGBASE+$7a ; capture 1 holding register
007c                    TC2H:           equ REGBASE+$7c ; capture 2 holding register
007e                    TC3H:           equ REGBASE+$7e ; capture 3 holding register
                        
0080                    ATD0CTL0:       equ REGBASE+$80 ;adc control 0 (reserved)
0081                    ATD0CTL1:       equ REGBASE+$81 ;adc control 1 (reserved)
0082                    ATD0CTL2:       equ REGBASE+$82 ;adc control 2
0083                    ATD0CTL3:       equ REGBASE+$83 ;adc control 3
0084                    ATD0CTL4:       equ REGBASE+$84 ;adc control 4
0085                    ATD0CTL5:       equ REGBASE+$85 ;adc control 5
0086                    ATD0STAT:       equ REGBASE+$86 ;adc status register hi
0086                    ATD0STAT0:      equ REGBASE+$86 ;adc status register hi
008b                    ATD0STAT1:      equ REGBASE+$8b ;adc status register lo
0088                    ATD0TEST:       equ REGBASE+$88 ;adc test (reserved)
                        *atd0test       equ REGBASE+$89 ;
                        
008d                    ATD0DIEN:        equ REGBASE+$8d ;
                        
008f                    PORTAD:         equ REGBASE+$8f ;port adc = input only
0090                    ADR00H:         equ REGBASE+$90 ;adc result 0 register
0092                    ADR01H:         equ REGBASE+$92 ;adc result 1 register
0094                    ADR02H:         equ REGBASE+$94 ;adc result 2 register
0096                    ADR03H:         equ REGBASE+$96 ;adc result 3 register
0098                    ADR04H:         equ REGBASE+$98 ;adc result 4 register
009a                    ADR05H:         equ REGBASE+$9a ;adc result 5 register
009c                    ADR06H:         equ REGBASE+$9c ;adc result 6 register
009e                    ADR07H:         equ REGBASE+$9e ;adc result 7 register
                        
00a0                    PWME:                equ REGBASE+$a0 ;pwm enable
00a1                    PWMPOL:         equ REGBASE+$a1 ;pwm polarity
00a2                    PWMCLK:         equ REGBASE+$a2 ;pwm clock select register
00a3                    PWMPRCLK:       equ REGBASE+$a3 ;pwm prescale clock select register
00a4                    PWMCAE:         equ REGBASE+$a4 ;pwm center align select register
00a5                    PWMCTL:         equ REGBASE+$a5 ;pwm control register
00a6                    PWMTST:         equ REGBASE+$a6 ;reserved
00a7                    PWMPRSC:        equ REGBASE+$a7 ;reserved
00a8                    PWMSCLA:        equ REGBASE+$a8 ;pwm scale a
00a9                    PWMSCLB:        equ REGBASE+$a9 ;pwm scale b
00aa                    PWMSCNTA:       equ REGBASE+$aa ;reserved
00ab                    PWMSCNTB:       equ REGBASE+$ab ;reserved
00ac                    PWMCNT0:        equ REGBASE+$ac ;pwm channel 0 counter
00ad                    PWMCNT1:        equ REGBASE+$ad ;pwm channel 1 counter
00ae                    PWMCNT2:        equ REGBASE+$ae ;pwm channel 2 counter
00af                    PWMCNT3:        equ REGBASE+$af ;pwm channel 3 counter
00b0                    PWMCNT4:        equ REGBASE+$b0 ;pwm channel 4 counter
00b1                    PWMCNT5:        equ REGBASE+$b1 ;pwm channel 5 counter
00b2                    PWMCNT6:        equ REGBASE+$b2 ;pwm channel 6 counter
00b3                    PWMCNT7:        equ REGBASE+$b3 ;pwm channel 7 counter
00b4                    PWMPER0:        equ REGBASE+$b4 ;pwm channel 0 period
00b5                    PWMPER1:        equ REGBASE+$b5 ;pwm channel 1 period
00b6                    PWMPER2:        equ REGBASE+$b6 ;pwm channel 2 period
00b7                    PWMPER3:        equ REGBASE+$b7 ;pwm channel 3 period
00b8                    PWMPER4:        equ REGBASE+$b8 ;pwm channel 4 period
00b9                    PWMPER5:        equ REGBASE+$b9 ;pwm channel 5 period
00ba                    PWMPER6:        equ REGBASE+$ba ;pwm channel 6 period
00bb                    PWMPER7:        equ REGBASE+$bb ;pwm channel 7 period
00bc                    PWMDTY0:        equ REGBASE+$bc ;pwm channel 0 duty cycle
00bd                    PWMDTY1:        equ REGBASE+$bd ;pwm channel 1 duty cycle
00be                    PWMDTY2:        equ REGBASE+$be ;pwm channel 2 duty cycle
00bf                    PWMDTY3:        equ REGBASE+$bf ;pwm channel 3 duty cycle
00c0                    PWMDTY4:        equ REGBASE+$c0 ;pwm channel 4 duty cycle
00c1                    PWMDTY5:        equ REGBASE+$c1 ;pwm channel 5 duty cycle
00c2                    PWMDTY6:        equ REGBASE+$c2 ;pwm channel 6 duty cycle
00c3                    PWMDTY7:        equ REGBASE+$c3 ;pwm channel 7 duty cycle
00c4                    PWMSDN:         equ REGBASE+$c4 ;pwm shutdown register
                        
00c8                    SC0BDH:         equ REGBASE+$c8 ;sci 0 baud reg hi byte
00c9                    SC0BDL:         equ REGBASE+$c9 ;sci 0 baud reg lo byte
00ca                    SC0CR1:         equ REGBASE+$ca ;sci 0 control1 reg
00cb                    SC0CR2:         equ REGBASE+$cb ;sci 0 control2 reg
00cc                    SC0SR1:         equ REGBASE+$cc ;sci 0 status reg 1
00cd                    SC0SR2:         equ REGBASE+$cd ;sci 0 status reg 2
00ce                    SC0DRH:         equ REGBASE+$ce ;sci 0 data reg hi
00cf                    SC0DRL:         equ REGBASE+$cf ;sci 0 data reg lo
                        
00d0                    SC1BDH:         equ REGBASE+$d0 ;sci 1 baud reg hi byte
00d1                    SC1BDL:         equ REGBASE+$d1 ;sci 1 baud reg lo byte
00d2                    SC1CR1:         equ REGBASE+$d2 ;sci 1 control1 reg
00d3                    SC1CR2:         equ REGBASE+$d3 ;sci 1 control2 reg
00d4                    SC1SR1:         equ REGBASE+$d4 ;sci 1 status reg 1
00d5                    SC1SR2:         equ REGBASE+$d5 ;sci 1 status reg 2
00d6                    SC1DRH:         equ REGBASE+$d6 ;sci 1 data reg hi
00d7                    SC1DRL:         equ REGBASE+$d7 ;sci 1 data reg lo
                        
00d8                    SPI0CR1:        equ REGBASE+$d8 ;spi 0 control1 reg
00d9                    SPI0CR2:        equ REGBASE+$d9 ;spi 0 control2 reg
00da                    SPI0BR:         equ REGBASE+$da ;spi 0 baud reg
00db                    SPI0SR:         equ REGBASE+$db ;spi 0 status reg hi
00dd                    SP0DR:          equ REGBASE+$dd ;spi 0 data reg  FOR COMPATIBILITY
00dd                    SPI0DR:          equ REGBASE+$dd ;spi 0 data reg
                        
00e0                    IBAD:                equ REGBASE+$e0 ;i2c bus address register
00e1                    IBFD:                equ REGBASE+$e1 ;i2c bus frequency divider
00e2                    IBCR:                equ REGBASE+$e2 ;i2c bus control register
00e3                    IBSR:                equ REGBASE+$e3 ;i2c bus status register
00e4                    IBDR:                equ REGBASE+$e4 ;i2c bus message data register
                        
00e8                    DLCBCR1:        equ REGBASE+$e8 ;bdlc control regsiter 1
00e9                    DLCBSVR:        equ REGBASE+$e9 ;bdlc state vector register
00ea                    DLCBCR2:        equ REGBASE+$ea ;bdlc control register 2
00eb                    DLCBDR:                equ REGBASE+$eb ;bdlc data register
00ec                    DLCBARD:        equ REGBASE+$ec ;bdlc analog delay register
00ed                    DLCBRSR:        equ REGBASE+$ed ;bdlc rate select register
00ee                    DLCSCR:                equ REGBASE+$ee ;bdlc control register
00ef                    DLCBSTAT:        equ REGBASE+$ef ;bdlc status register
                        
00f0                    SPI1CR1:        equ REGBASE+$f0 ;spi 1 control1 reg
00f1                    SPI1CR2:        equ REGBASE+$f1 ;spi 1 control2 reg
00f2                    SPI1BR:         equ REGBASE+$f2 ;spi 1 baud reg
00f3                    SPI1SR:         equ REGBASE+$f3 ;spi 1 status reg hi
00f5                    SPI1DR:          equ REGBASE+$f5 ;spi 1 data reg
00f5                    SP1DR:          equ REGBASE+$f5 ;spi 1 data reg   FOR COMPATIBILITY
                        
00f8                    SPI2CR1:        equ REGBASE+$f8 ;spi 2 control1 reg
00f9                    SPI2CR2:        equ REGBASE+$f9 ;spi 2 control2 reg
00fa                    SPI2BR:         equ REGBASE+$fa ;spi 2 baud reg
00fb                    SPI2SR:         equ REGBASE+$fb ;spi 2 status reg hi
00fd                    SPI2DR:         equ REGBASE+$fd ;spi 2 data reg
00fd                    SP2DR:          equ REGBASE+$fd ;spi 2 data reg   FOR COMPATIBILITY
                        
0100                    FCLKDIV:        equ REGBASE+$100 ;flash clock divider
0101                    FSEC:                equ REGBASE+$101 ;flash security register
                        
0103                    FCNFG:                equ REGBASE+$103 ;flash configuration register
0104                    FPROT:                equ REGBASE+$104 ;flash protection register
0105                    FSTAT:                equ REGBASE+$105 ;flash status register
0106                    FCMD:                equ REGBASE+$106 ;flash command register
                        
0110                    ECLKDIV:        equ REGBASE+$110 ;eeprom clock divider
                        
0113                    ECNFG:                equ REGBASE+$113 ;eeprom configuration register
0114                    EPROT:                equ REGBASE+$114 ;eeprom protection register
0115                    ESTAT:                equ REGBASE+$115 ;eeprom status register
0116                    ECMD:                equ REGBASE+$116 ;eeprom command register
                        
0120                    ATD1CTL0:       equ REGBASE+$120 ;adc1 control 0 (reserved)
0121                    ATD1CTL1:       equ REGBASE+$121 ;adc1 control 1 (reserved)
0122                    ATD1CTL2:       equ REGBASE+$122 ;adc1 control 2
0123                    ATD1CTL3:       equ REGBASE+$123 ;adc1 control 3
0124                    ATD1CTL4:       equ REGBASE+$124 ;adc1 control 4
0125                    ATD1CTL5:       equ REGBASE+$125 ;adc1 control 5
0126                    ATD1STAT0:      equ REGBASE+$126 ;adc1 status register hi
012b                    ATD1STAT1:      equ REGBASE+$12b ;adc1 status register lo
0128                    ATD1TEST:       equ REGBASE+$128 ;adc1 test (reserved)
                        *atd1test       equ REGBASE+$129 ;
                        
012d                    ATDDIEN:        equ REGBASE+$12d ;adc1 input enable register
                        
012f                    PORTAD1:        equ REGBASE+$12f ;port adc1 = input only
0130                    ADR10H:         equ REGBASE+$130 ;adc1 result 0 register
0132                    ADR11H:         equ REGBASE+$132 ;adc1 result 1 register
0134                    ADR12H:         equ REGBASE+$134 ;adc1 result 2 register
0136                    ADR13H:         equ REGBASE+$136 ;adc1 result 3 register
0138                    ADR14H:         equ REGBASE+$138 ;adc1 result 4 register
013a                    ADR15H:         equ REGBASE+$13a ;adc1 result 5 register
013c                    ADR16H:         equ REGBASE+$13c ;adc1 result 6 register
013e                    ADR17H:         equ REGBASE+$13e ;adc1 result 7 register
                        
0140                    CAN0CTL0:        equ REGBASE+$140 ;can0 control register 0
0141                    CAN0CTL1:        equ REGBASE+$141 ;can0 control register 1
0142                    CAN0BTR0:        equ REGBASE+$142 ;can0 bus timing register 0
0143                    CAN0BTR1:        equ REGBASE+$143 ;can0 bus timing register 1
0144                    CAN0RFLG:        equ REGBASE+$144 ;can0 receiver flags
0145                    CAN0RIER:        equ REGBASE+$145 ;can0 receiver interrupt enables
0146                    CAN0TFLG:        equ REGBASE+$146 ;can0 transmit flags
0147                    CAN0TIER:        equ REGBASE+$147 ;can0 transmit interrupt enables
0148                    CAN0TARQ:        equ REGBASE+$148 ;can0 transmit message abort control
0149                    CAN0TAAK:        equ REGBASE+$149 ;can0 transmit message abort status
014a                    CAN0TBEL:        equ REGBASE+$14a ;can0 transmit buffer select
014b                    CAN0IDAC:        equ REGBASE+$14b ;can0 identfier acceptance control
                        
014e                    CAN0RERR:        equ REGBASE+$14e ;can0 receive error counter
014f                    CAN0TERR:        equ REGBASE+$14f ;can0 transmit error counter
0150                    CAN0IDA0:        equ REGBASE+$150 ;can0 identifier acceptance register 0
0151                    CAN0IDA1:        equ REGBASE+$151 ;can0 identifier acceptance register 1
0152                    CAN0IDA2:        equ REGBASE+$152 ;can0 identifier acceptance register 2
0153                    CAN0IDA3:        equ REGBASE+$153 ;can0 identifier acceptance register 3
0154                    CAN0IDM0:        equ REGBASE+$154 ;can0 identifier mask register 0
0155                    CAN0IDM1:        equ REGBASE+$155 ;can0 identifier mask register 1
0156                    CAN0IDM2:        equ REGBASE+$156 ;can0 identifier mask register 2
0157                    CAN0IDM3:        equ REGBASE+$157 ;can0 identifier mask register 3
0158                    CAN0IDA4:        equ REGBASE+$158 ;can0 identifier acceptance register 4
0159                    CAN0IDA5:        equ REGBASE+$159 ;can0 identifier acceptance register 5
015a                    CAN0IDA6:        equ REGBASE+$15a ;can0 identifier acceptance register 6
015b                    CAN0IDA7:        equ REGBASE+$15b ;can0 identifier acceptance register 7
015c                    CAN0IDM4:        equ REGBASE+$15c ;can0 identifier mask register 4
015d                    CAN0IDM5:        equ REGBASE+$15d ;can0 identifier mask register 5
015e                    CAN0IDM6:        equ REGBASE+$15e ;can0 identifier mask register 6
015f                    CAN0IDM7:        equ REGBASE+$15f ;can0 identifier mask register 7
0160                    CAN0RXFG:        equ REGBASE+$160 ;can0 rx foreground buffer thru +$16f
0170                    CAN0TXFG:        equ REGBASE+$170 ;can0 tx foreground buffer thru +$17f
                        
0180                    CAN1CTL0:        equ REGBASE+$180 ;can1 control register 0
0181                    CAN1CTL1:        equ REGBASE+$181 ;can1 control register 1
0182                    CAN1BTR0:        equ REGBASE+$182 ;can1 bus timing register 0
0183                    CAN1BTR1:        equ REGBASE+$183 ;can1 bus timing register 1
0184                    CAN1RFLG:        equ REGBASE+$184 ;can1 receiver flags
0185                    CAN1RIER:        equ REGBASE+$185 ;can1 receiver interrupt enables
0186                    CAN1TFLG:        equ REGBASE+$186 ;can1 transmit flags
0187                    CAN1TIER:        equ REGBASE+$187 ;can1 transmit interrupt enables
0188                    CAN1TARQ:        equ REGBASE+$188 ;can1 transmit message abort control
0189                    CAN1TAAK:        equ REGBASE+$189 ;can1 transmit message abort status
018a                    CAN1TBEL:        equ REGBASE+$18a ;can1 transmit buffer select
018b                    CAN1IDAC:        equ REGBASE+$18b ;can1 identfier acceptance control
                        
018e                    CAN1RERR:        equ REGBASE+$18e ;can1 receive error counter
018f                    CAN1TERR:        equ REGBASE+$18f ;can1 transmit error counter
0190                    CAN1IDA0:        equ REGBASE+$190 ;can1 identifier acceptance register 0
0191                    CAN1IDA1:        equ REGBASE+$191 ;can1 identifier acceptance register 1
0192                    CAN1IDA2:        equ REGBASE+$192 ;can1 identifier acceptance register 2
0193                    CAN1IDA3:        equ REGBASE+$193 ;can1 identifier acceptance register 3
0194                    CAN1IDM0:        equ REGBASE+$194 ;can1 identifier mask register 0
0195                    CAN1IDM1:        equ REGBASE+$195 ;can1 identifier mask register 1
0196                    CAN1IDM2:        equ REGBASE+$196 ;can1 identifier mask register 2
0197                    CAN1IDM3:        equ REGBASE+$197 ;can1 identifier mask register 3
0198                    CAN1IDA4:        equ REGBASE+$198 ;can1 identifier acceptance register 4
0199                    CAN1IDA5:        equ REGBASE+$199 ;can1 identifier acceptance register 5
019a                    CAN1IDA6:        equ REGBASE+$19a ;can1 identifier acceptance register 6
019b                    CAN1IDA7:        equ REGBASE+$19b ;can1 identifier acceptance register 7
019c                    CAN1IDM4:        equ REGBASE+$19c ;can1 identifier mask register 4
019d                    CAN1IDM5:        equ REGBASE+$19d ;can1 identifier mask register 5
019e                    CAN1IDM6:        equ REGBASE+$19e ;can1 identifier mask register 6
019f                    CAN1IDM7:        equ REGBASE+$19f ;can1 identifier mask register 7
01a0                    CAN1RXFG:        equ REGBASE+$1a0 ;can1 rx foreground buffer thru +$1af
01b0                    CAN1TXFG:        equ REGBASE+$1b0 ;can1 tx foreground buffer thru +$1bf
                        
01c0                    CAN2CTL0:        equ REGBASE+$1c0 ;can2 control register 0
01c1                    CAN2CTL1:        equ REGBASE+$1c1 ;can2 control register 1
01c2                    CAN2BTR0:        equ REGBASE+$1c2 ;can2 bus timing register 0
01c3                    CAN2BTR1:        equ REGBASE+$1c3 ;can2 bus timing register 1
01c4                    CAN2RFLG:        equ REGBASE+$1c4 ;can2 receiver flags
01c5                    CAN2RIER:        equ REGBASE+$1c5 ;can2 receiver interrupt enables
01c6                    CAN2TFLG:        equ REGBASE+$1c6 ;can2 transmit flags
01c7                    CAN2TIER:        equ REGBASE+$1c7 ;can2 transmit interrupt enables
01c8                    CAN2TARQ:        equ REGBASE+$1c8 ;can2 transmit message abort control
01c9                    CAN2TAAK:        equ REGBASE+$1c9 ;can2 transmit message abort status
01ca                    CAN2TBEL:        equ REGBASE+$1ca ;can2 transmit buffer select
01cb                    CAN2IDAC:        equ REGBASE+$1cb ;can2 identfier acceptance control
                        
01ce                    CAN2RERR:        equ REGBASE+$1ce ;can2 receive error counter
01cf                    CAN2TERR:        equ REGBASE+$1cf ;can2 transmit error counter
01d0                    CAN2IDA0:        equ REGBASE+$1d0 ;can2 identifier acceptance register 0
01d1                    CAN2IDA1:        equ REGBASE+$1d1 ;can2 identifier acceptance register 1
01d2                    CAN2IDA2:        equ REGBASE+$1d2 ;can2 identifier acceptance register 2
01d3                    CAN2IDA3:        equ REGBASE+$1d3 ;can2 identifier acceptance register 3
01d4                    CAN2IDM0:        equ REGBASE+$1d4 ;can2 identifier mask register 0
01d5                    CAN2IDM1:        equ REGBASE+$1d5 ;can2 identifier mask register 1
01d6                    CAN2IDM2:        equ REGBASE+$1d6 ;can2 identifier mask register 2
01d7                    CAN2IDM3:        equ REGBASE+$1d7 ;can2 identifier mask register 3
01d8                    CAN2IDA4:        equ REGBASE+$1d8 ;can2 identifier acceptance register 4
01d9                    CAN2IDA5:        equ REGBASE+$1d9 ;can2 identifier acceptance register 5
01da                    CAN2IDA6:        equ REGBASE+$1da ;can2 identifier acceptance register 6
01db                    CAN2IDA7:        equ REGBASE+$1db ;can2 identifier acceptance register 7
01dc                    CAN2IDM4:        equ REGBASE+$1dc ;can2 identifier mask register 4
01dd                    CAN2IDM5:        equ REGBASE+$1dd ;can2 identifier mask register 5
01de                    CAN2IDM6:        equ REGBASE+$1de ;can2 identifier mask register 6
01df                    CAN2IDM7:        equ REGBASE+$1df ;can2 identifier mask register 7
01e0                    CAN2RXFG:        equ REGBASE+$1e0 ;can2 rx foreground buffer thru +$1ef
01f0                    CAN2TXFG:        equ REGBASE+$1f0 ;can2 tx foreground buffer thru +$1ff
                        
0200                    CAN3CTL0:        equ REGBASE+$200 ;can3 control register 0
0201                    CAN3CTL1:        equ REGBASE+$201 ;can3 control register 1
0202                    CAN3BTR0:        equ REGBASE+$202 ;can3 bus timing register 0
0203                    CAN3BTR1:        equ REGBASE+$203 ;can3 bus timing register 1
0204                    CAN3RFLG:        equ REGBASE+$204 ;can3 receiver flags
0205                    CAN3RIER:        equ REGBASE+$205 ;can3 receiver interrupt enables
0206                    CAN3TFLG:        equ REGBASE+$206 ;can3 transmit flags
0207                    CAN3TIER:        equ REGBASE+$207 ;can3 transmit interrupt enables
0208                    CAN3TARQ:        equ REGBASE+$208 ;can3 transmit message abort control
0209                    CAN3TAAK:        equ REGBASE+$209 ;can3 transmit message abort status
020a                    CAN3TBEL:        equ REGBASE+$20a ;can3 transmit buffer select
020b                    CAN3IDAC:        equ REGBASE+$20b ;can3 identfier acceptance control
                        
020e                    CAN3RERR:        equ REGBASE+$20e ;can3 receive error counter
020f                    CAN3TERR:        equ REGBASE+$20f ;can3 transmit error counter
0210                    CAN3IDA0:        equ REGBASE+$210 ;can3 identifier acceptance register 0
0211                    CAN3IDA1:        equ REGBASE+$211 ;can3 identifier acceptance register 1
0212                    CAN3IDA2:        equ REGBASE+$212 ;can3 identifier acceptance register 2
0213                    CAN3IDA3:        equ REGBASE+$213 ;can3 identifier acceptance register 3
0214                    CAN3IDM0:        equ REGBASE+$214 ;can3 identifier mask register 0
0215                    CAN3IDM1:        equ REGBASE+$215 ;can3 identifier mask register 1
0216                    CAN3IDM2:        equ REGBASE+$216 ;can3 identifier mask register 2
0217                    CAN3IDM3:        equ REGBASE+$217 ;can3 identifier mask register 3
0218                    CAN3IDA4:        equ REGBASE+$218 ;can3 identifier acceptance register 4
0219                    CAN3IDA5:        equ REGBASE+$219 ;can3 identifier acceptance register 5
021a                    CAN3IDA6:        equ REGBASE+$21a ;can3 identifier acceptance register 6
021b                    CAN3IDA7:        equ REGBASE+$21b ;can3 identifier acceptance register 7
021c                    CAN3IDM4:        equ REGBASE+$21c ;can3 identifier mask register 4
021d                    CAN3IDM5:        equ REGBASE+$21d ;can3 identifier mask register 5
021e                    CAN3IDM6:        equ REGBASE+$21e ;can3 identifier mask register 6
021f                    CAN3IDM7:        equ REGBASE+$21f ;can3 identifier mask register 7
0220                    CAN3RXFG:        equ REGBASE+$220 ;can3 rx foreground buffer thru +$22f
0230                    CAN3TXFG:        equ REGBASE+$230 ;can3 tx foreground buffer thru +$23f
                        
0240                    PTT:                equ REGBASE+$240 ;portt data register
0241                    PTIT:                equ REGBASE+$241 ;portt input register
0242                    DDRT:                equ REGBASE+$242 ;portt direction register
0243                    RDRT:                equ REGBASE+$243 ;portt reduced drive register
0244                    PERT:                equ REGBASE+$244 ;portt pull device enable
0245                    PPST:                equ REGBASE+$245 ;portt pull polarity select
                        
0248                    PTS:                equ REGBASE+$248 ;ports data register
0249                    PTIS:                equ REGBASE+$249 ;ports input register
024a                    DDRS:                equ REGBASE+$24a ;ports direction register
024b                    RDRS:                equ REGBASE+$24b ;ports reduced drive register
024c                    PERS:                equ REGBASE+$24c ;ports pull device enable
024d                    PPSS:                equ REGBASE+$24d ;ports pull polarity select
024e                    WOMS:                equ REGBASE+$24e ;ports wired or mode register
                        
0250                    PTM:                equ REGBASE+$250 ;portm data register
0251                    PTIM:                equ REGBASE+$251 ;portm input register
0252                    DDRM:                equ REGBASE+$252 ;portm direction register
0253                    RDRM:                equ REGBASE+$253 ;portm reduced drive register
0254                    PERM:                equ REGBASE+$254 ;portm pull device enable
0255                    PPSM:                equ REGBASE+$255 ;portm pull polarity select
0256                    WOMM:                equ REGBASE+$256 ;portm wired or mode register
0257                    MODRR:                equ REGBASE+$257 ;portm module routing register
                        
0258                    PTP:                equ REGBASE+$258 ;portp data register
0259                    PTIP:                equ REGBASE+$259 ;portp input register
025a                    DDRP:                equ REGBASE+$25a ;portp direction register
025b                    RDRP:                equ REGBASE+$25b ;portp reduced drive register
025c                    PERP:                equ REGBASE+$25c ;portp pull device enable
025d                    PPSP:                equ REGBASE+$25d ;portp pull polarity select
025e                    PIEP:                equ REGBASE+$25e ;portp interrupt enable register
025f                    PIFP:                equ REGBASE+$25f ;portp interrupt flag register
                        
0260                    PTH:                equ REGBASE+$260 ;porth data register
0261                    PTIH:                equ REGBASE+$261 ;porth input register
0262                    DDRH:                equ REGBASE+$262 ;porth direction register
0263                    RDRH:                equ REGBASE+$263 ;porth reduced drive register
0264                    PERH:                equ REGBASE+$264 ;porth pull device enable
0265                    PPSH:                equ REGBASE+$265 ;porth pull polarity select
0266                    PIEH:                equ REGBASE+$266 ;porth interrupt enable register
0267                    PIFH:                equ REGBASE+$267 ;porth interrupt flag register
                        
0268                    PTJ:                equ REGBASE+$268 ;portj data register
0269                    PTIJ:                equ REGBASE+$269 ;portj input register
026a                    DDRJ:                equ REGBASE+$26a ;portj direction register
026b                    RDRJ:                equ REGBASE+$26b ;portj reduced drive register
026c                    PERJ:                equ REGBASE+$26c ;portj pull device enable
026d                    PPSJ:                equ REGBASE+$26d ;portj pull polarity select
026e                    PIEJ:                equ REGBASE+$26e ;portj interrupt enable register
026f                    PIFJ:                equ REGBASE+$26f ;portj interrupt flag register
                        
0280                    CAN4CTL0:        equ REGBASE+$280 ;can4 control register 0
0281                    CAN4CTL1:        equ REGBASE+$281 ;can4 control register 1
0282                    CAN4BTR0:        equ REGBASE+$282 ;can4 bus timing register 0
0283                    CAN4BTR1:        equ REGBASE+$283 ;can4 bus timing register 1
0284                    CAN4RFLG:        equ REGBASE+$284 ;can4 receiver flags
0285                    CAN4RIER:        equ REGBASE+$285 ;can4 receiver interrupt enables
0286                    CAN4TFLG:        equ REGBASE+$286 ;can4 transmit flags
0287                    CAN4TIER:        equ REGBASE+$287 ;can4 transmit interrupt enables
0288                    CAN4TARQ:        equ REGBASE+$288 ;can4 transmit message abort control
0289                    CAN4TAAK:        equ REGBASE+$289 ;can4 transmit message abort status
028a                    CAN4TBEL:        equ REGBASE+$28a ;can4 transmit buffer select
028b                    CAN4IDAC:        equ REGBASE+$28b ;can4 identfier acceptance control
                        
028e                    CAN4RERR:        equ REGBASE+$28e ;can4 receive error counter
028f                    CAN4TERR:        equ REGBASE+$28f ;can4 transmit error counter
0290                    CAN4IDA0:        equ REGBASE+$290 ;can4 identifier acceptance register 0
0291                    CAN4IDA1:        equ REGBASE+$291 ;can4 identifier acceptance register 1
0292                    CAN4IDA2:        equ REGBASE+$292 ;can4 identifier acceptance register 2
0293                    CAN4IDA3:        equ REGBASE+$293 ;can4 identifier acceptance register 3
0294                    CAN4IDM0:        equ REGBASE+$294 ;can4 identifier mask register 0
0295                    CAN4IDM1:        equ REGBASE+$295 ;can4 identifier mask register 1
0296                    CAN4IDM2:        equ REGBASE+$296 ;can4 identifier mask register 2
0297                    CAN4IDM3:        equ REGBASE+$297 ;can4 identifier mask register 3
0298                    CAN4IDA4:        equ REGBASE+$298 ;can4 identifier acceptance register 4
0299                    CAN4IDA5:        equ REGBASE+$299 ;can4 identifier acceptance register 5
029a                    CAN4IDA6:        equ REGBASE+$29a ;can4 identifier acceptance register 6
029b                    CAN4IDA7:        equ REGBASE+$29b ;can4 identifier acceptance register 7
029c                    CAN4IDM4:        equ REGBASE+$29c ;can4 identifier mask register 4
029d                    CAN4IDM5:        equ REGBASE+$29d ;can4 identifier mask register 5
029e                    CAN4IDM6:        equ REGBASE+$29e ;can4 identifier mask register 6
029f                    CAN4IDM7:        equ REGBASE+$29f ;can4 identifier mask register 7
02a0                    CAN4RXFG:        equ REGBASE+$2a0 ;can4 rx foreground buffer thru +$2af
02b0                    CAN4TXFG:        equ REGBASE+$2b0 ;can4 tx foreground buffer thru +$2bf
                        
                        * end registers
                        #endinclude

                        
                        
                        
                        ;#################################################################
                        ;               Definicion de estructuras de datos
                        
                        
000d                    CR:             equ $0D
000a                    LF:             equ $0A
0000                    FIN:            equ $0
                        
1000                                    org $1000
                        
1000                    CONT_RTI        ds 1
1001                    BANDERAS:       ds 1        ;bit 5 Alarma?, bit 4 rtc activado, bit 6 rs , bit 7 ESCRITURALECTURAIIC, bit 1: ya se puede leer
1002                    BRILLO:         ds 1        ; 0-100 cotrola el brillo de 7 seg
1003                    CONT_DIG:       ds 1        ;digito actual de 7seg
1004                    CONT_TICKS:     ds 1        ;
1005                    DT:             ds 1        ;100 - BRILLO, valor donde se resetea CONT_TICKS
1006                    BCD1:           ds 1        ;bin 1 en bcd
1007                    BCD2:           ds 1        ;bin 2 en bcd
1008                    DISP1:          ds 1        ;izquierda bcd1
1009                    DISP2:          ds 1        ;derecha bcd1
100a                    DISP3:          ds 1        ;izquierda bcd 2
100b                    DISP4:          ds 1        ;derecha bcd2   
100c                    LEDS:           ds 1        ;valor que se envia al puerto B para los leds
100d 3f 06 5b 4f 66 6d  SEGMENT:        db $3F,$06,$5B,$4F,$66,$6D,$7D,$07,$7F,$6F  ;0,1,2,3,4,5,6,7,8,9
     7d 07 7f 6f
1017                    CONT_7SEG:      ds 2        ;cuando llega a 5000 se actualizan los valores de DISP
1019                    CONT_DELAY:     ds 1        ;
101a 64                 D2mS:           db 100
101b 0d                 D240uS:         db 13
101c 03                 D60uS:          db 3
101d 01                 Clear_LCD:      db $01      ;constante igual a comando clear
101e 80                 ADD_L1:         db $80      ;constante igual a Adress linea 1 lcd
101f c0                 ADD_L2:         db $C0      ;constante igual a Adress linea 2 lcd
1020 04 28 28 06 0c     iniDsp:         db 04,$28,$28,$06,$0C     ;numero de bytes,function set, function set, entry mode, display on off
                        
                        
1025                    Index_RTC:      ds 1            ;Posicion actual que se va a enviar o recibir
1026 d0                 Dir_WR:         db $D0              ;Direccion de escritura del DS1307
1027 d1                 Dir_RD:         db $D1              ;Direccion de lectura del DS1307
1028 00                 Dir_Seg:        db $00              ;direccion en la que se debe realizar la primera escritura y lectura del DS1307
1029 00 09              ALARMA:         dw $0009
102b 45 59 08 02 04 12  T_WRITE_RTC:    db $45,$59,$08,$02,$04,$12      ;Hexadecimal porque es bcd, El bit 6 de horas se deja abajo porque es en formato 24 H. Se ajusta a 15 s antes de que suene la alarma
1040                                    org $1040
1040                    T_Read_RTC:     ds 6
                        
                        
1046                    CONT_REB:       ds 1
1047                    CONT_TCL:       ds 1
1048                    PATRON:         ds 1
                        
                        
                        
1050                                    org $1050
1050 20 20 20 20 20 52  MESS1:          fcc "     RELOJ"
     45 4c 4f 4a
105a 00                                 db FIN
105b 20 44 45 53 50 45  MESS2:          fcc " DESPERTADOR 623"
     52 54 41 44 4f 52
     20 36 32 33
106b 00                                 db FIN
                        
                        
                        
                        
                        
                                        
                                        
3e70                                    org $3E70
3e70 22 cd                              dw RTI_ISR
3e4c                                    org $3E4C
3e4c 22 58                              dw PTH_ISR
3e66                                    org $3E66
3e66 22 fd                              dw OC4_ISR
3e64                                    org $3E64
3e64 23 c5                              dw OC5_ISR
3e40                                    org $3E40
3e40 23 cd                              dw IIC_ISR
                        
                        ;################################################
                        ;       Programa principal
2000                                    org $2000
                        
                        ;################################################
                        ;       Definicion de hardware
                        
                        ;       LEDS
2000 18 0b ff 00 03                     movb #$FF, DDRB
2005 1c 02 6a 02                        bset DDRJ,$02
2009 1c 02 68 02                        bset PTJ, $02
                        
                        ;       7SEG
200d 18 0b 0f 02 5a                     movb #$0F, DDRP
2012 18 0b 0f 02 58                     movb #$0F, PTP
                        ;       Output compare
2017 18 0b 90 00 46                     movb #$90, TSCR1        ;Habilita las interrupciones con tffca
201c 18 0b 03 00 4d                     movb #$03, TSCR2        ;Prescaler en 8 
2021 18 0b 10 00 40                     movb #$10, TIOS         ;Se habilita la salida de oc4
2026 18 0b 05 00 48                     movb #$05, TCTL1        ;Se ponen en toggle oc4 y oc5
202b 79 00 49                           clr  TCTL2
202e 18 0b 10 00 4c                     movb #$10, TIE          ;Solo se habilita la interrupcion de oc4
2033 dc 44                              ldd TCNT
2035 c3 00 3c                           addd #60
2038 5c 58                              std TC4
203a 5c 5a                              std TC5
                                        
203c 18 0b ff 00 33                     movb #$FF,DDRK
                        
                        ;       Puerto H sw
                        
2041 1c 02 66 0f                        bset PIEH, $0F          ;habilitar interrupciones PH
2045 1c 02 67 0f                        bset PIFH, $0F
                        ;       RTI                 
2049 18 0b 65 00 3b                     movb #$65, RTICTL       ; esto lo pone en 25.152 ms no se puede en 1 s porque no se observan bien los leds de segundos en el reloj
204e 4c 38 80                           bset CRGINT, $80        ;habilitar interrupciones rti
                        
                        ;       IIC
2051 18 0b 1f 00 e1                     movb #$1F,IBFD          ;1f divider es igual a 240, da un tiempo 1.375 us mayor a 0.3 del periferico y menor que 3.45 maximo de iic
2056 18 0b c0 00 e2                     movb #$C0,IBCR           ;IBEN = 1, IBIE=1, el resto cero porque aun no se inicia la comunicacion 
205b 10 ef                              cli
                        
                        
                        
                        ;################################################
                        
                        ;               inicializacion
205d cf 3b ff                           lds #$3BFF
2060 79 10 06                           clr BCD1
2063 79 10 07                           clr BCD2
2066 79 10 40                           clr T_Read_RTC
2069 79 10 41                           clr T_Read_RTC+1
206c 79 10 42                           clr T_Read_RTC+2
206f 79 10 0c                           clr LEDS
2072 79 10 08                           clr DISP1
2075 79 10 09                           clr DISP2
2078 79 10 0a                           clr DISP3
207b 79 10 0b                           clr DISP4
                                        ;modser=1
207e 18 0b 01 10 03                     movb #1,CONT_DIG
2083 79 10 04                           clr CONT_TICKS
2086 18 0b 32 10 02                     movb #50, BRILLO
                                        
208b 79 10 46                           clr  CONT_REB
208e 1d 10 01 1f                        bclr BANDERAS,$1F      ;Poner las banderas en 0 FIXME
                                        ;bset BANDERAS,$00      ;Poner la bandera cambio nodo en 1 y modo en 1
                                        
                        
                        
                        ;       Programa main               
                                        loc
2092 ce 10 50                           ldx #MESS1
2095 cd 10 5b                           ldy #MESS2
2098 16 21 06                           jsr CARGAR_LCD
209b fc 10 29           mLoop`          ldd ALARMA
209e b1 10 41                           cmpa T_Read_RTC+1       ;Se compara los minutos de alarma con los de memoria
20a1 26 f8                              bne mLoop`
20a3 f1 10 42                           cmpb T_Read_RTC+2       ;Se compara las horas de alarma con las de memoria
20a6 26 f3                              bne mLoop`
20a8 1e 10 01 10 ee                     brset BANDERAS,$10,mLoop`       ;FIXME:Agregar esto a diagrama de flujos
20ad 1c 10 01 10                        bset BANDERAS,$10
20b1 18 0b 30 00 40                     movb #$30, TIOS
20b6 18 0b 30 00 4c                     movb #$30, TIE
20bb 20 de                              bra mLoop`
                        
                                        
                                        
                        ;################################################
                        ;       Subrutinas
                        ;################################################
                        ;       Subrutinas Generales
                        
                        
                        ;       BCD_7SEG
                        BCD_7SEG:       loc
20bd 18 0c 10 41 10 06                  movb T_Read_RTC+1,BCD1
20c3 18 0c 10 42 10 07                  movb T_Read_RTC+2,BCD2
20c9 ce 10 0d                           ldx #SEGMENT
20cc cd 10 08                           ldy #DISP1
20cf 86 00                              ldaa #0
20d1 f6 10 06                           ldab BCD1
20d4 20 03                              bra subrutinabcd`
20d6 f6 10 07           loadBCD2`       ldab BCD2
20d9 37                 subrutinabcd`   pshb 
20da c4 0f                              andb #$0F
20dc 18 0a e5 70                        movb B,X,1,Y+      ;muevo la parte baja de bcd a disp2 o disp 4
20e0 33                                 pulb 
20e1 54                                 lsrb
20e2 54                                 lsrb
20e3 54                                 lsrb
20e4 54                                 lsrb
20e5 18 0a e5 70                        movb B,X,1,Y+     ;muevo la parte alta de bcd a disp 1 o disp4
20e9 8d 10 0a                           cpy #DISP3
20ec 27 e8                              beq loadBCD2`
20ee 1f 10 40 01 0a     returnBCD_7SEG: brclr T_Read_RTC,$01,erasedots`
20f3 1c 10 09 80                        bset DISP2,$80
20f7 1c 10 0a 80                        bset DISP3,$80
20fb 20 08                              bra return`
20fd 1d 10 09 80        erasedots`      bclr DISP2,$80
2101 1d 10 0a 80                        bclr DISP3,$80          
2105 3d                 return`         rts
                        
                        
                        ;       CARGAR_LCD
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        CARGAR_LCD:     loc
2106 34                                 pshx
2107 ce 10 20                           ldx #iniDsp
210a e6 30                              ldab 1,X+
210c a6 30              loop1`          ldaa 1,X+
210e 1d 10 01 20                        bclr BANDERAS,$20
2112 16 21 8c                           jsr Send
2115 18 0c 10 1c 10 19                  movb D60uS,CONT_DELAY
211b 16 21 d3                           jsr Delay
211e 04 31 eb                           dbne B,loop1`           ;hasta aqui se estan mandando los comando iniciales de dsp
2121 1d 10 01 20                        bclr BANDERAS,$20
2125 b6 10 1d                           ldaa Clear_LCD
2128 16 21 8c                           jsr Send                ;hasta aqui se borra la pantalla
212b 18 0c 10 1a 10 19                  movb D2mS,CONT_DELAY
2131 16 21 d3                           jsr Delay
2134 30                                 pulx
2135 b6 10 1e                           ldaa ADD_L1                        ;aqui empieza cargar lcd
2138 1d 10 01 20                        bclr BANDERAS,$20
213c 16 21 8c                           jsr Send
213f 18 0c 10 1c 10 19                  movb D60uS,CONT_DELAY
2145 16 21 d3                           jsr Delay
2148 a6 30              loop2`          ldaa 1,X+
214a 81 00                              cmpa #FIN
214c 27 12                              beq linea2`
214e 1c 10 01 20                        bset BANDERAS,$20
2152 16 21 8c                           jsr Send
2155 18 0c 10 1c 10 19                  movb D60uS,CONT_DELAY
215b 16 21 d3                           jsr Delay
215e 20 e8                              bra loop2`
2160 b6 10 1f           linea2`         ldaa ADD_L2                        ;aqui empieza cargar la linea 2
2163 1d 10 01 20                        bclr BANDERAS,$20
2167 16 21 8c                           jsr Send
216a 18 0c 10 1c 10 19                  movb D60uS,CONT_DELAY
2170 16 21 d3                           jsr Delay
2173 a6 70              loop3`          ldaa 1,Y+
2175 81 00                              cmpa #FIN
2177 27 12                              beq returnLCD`
2179 1c 10 01 20                        bset BANDERAS,$20
217d 16 21 8c                           jsr Send
2180 18 0c 10 1c 10 19                  movb D60uS,CONT_DELAY
2186 16 21 d3                           jsr Delay
2189 20 e8                              bra loop3`
218b 3d                 returnLCD`      rts
                        
                        
                        ;       Send
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                                        loc
218c 36                 Send:           psha
218d 84 f0                              anda #$F0
218f 44                                 lsra
2190 44                                 lsra
2191 5a 32                              staa PORTK
2193 1e 10 01 20 05                     brset BANDERAS,$20,dato1`
2198 4d 32 01                           bclr PORTK,$01
219b 20 03                              bra continue1`
219d 4c 32 01           dato1`           bset PORTK,$01
21a0 4c 32 02           continue1`      bset PORTK,$02
21a3 18 0c 10 1b 10 19                  movb D240uS,CONT_DELAY
21a9 16 21 d3                           jsr Delay
21ac 4d 32 02                           bclr PORTK,$02
21af 32                                 pula
21b0 84 0f                              anda #$0F
21b2 48                                 lsla
21b3 48                                 lsla
21b4 5a 32                              staa PORTK
21b6 1e 10 01 20 05                     brset BANDERAS,$20,dato2`
21bb 4d 32 01                           bclr PORTK,$01
21be 20 03                              bra continue2`
21c0 4c 32 01           dato2`          bset PORTK,$01
21c3 4c 32 02           continue2`      bset PORTK,$02
21c6 18 0c 10 1b 10 19                  movb D240uS,CONT_DELAY
21cc 16 21 d3                           jsr Delay
21cf 4d 32 02                           bclr PORTK,$02
21d2 3d                                 rts    
                        
                        ;       Delay
                                        loc
21d3 f7 10 19           Delay:          tst CONT_DELAY 
21d6 26 fb                              bne Delay
21d8 3d                                 rts
                        
                        
                        
                        
                        ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        ;   Subrutina READ_RTC
                        ;################################################################################################################################################
                        ;Descripcion:   
                                ;Lectura de ds1307
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################                
                        
                                        loc
21d9 b6 10 25           READ_RTC:       ldaa Index_RTC
21dc 26 08                              bne next0`          ;Primera?
21de 18 0c 10 28 00 e4                  movb Dir_Seg,IBDR       ;Se envia la direccion a leer (Segundos)
21e4 20 38                              bra return_rrtc
21e6 81 01              next0`          cmpa #1             ;Segunda?
21e8 26 0b                              bne next1`
21ea 4c e2 04                           bset IBCR,$04       ;Repeate start
21ed 18 0c 10 27 00 e4                  movb Dir_RD,IBDR
21f3 20 29                              bra return_rrtc
21f5 81 02              next1`          cmpa #2             ;Tercera?
21f7 26 07                              bne next2`
21f9 4d e2 1c                           bclr IBCR,$1C       ;Borra repeated start y pasa a modo rx y pone en 0 el ack por seguridad
21fc d6 e4                              ldab IBDR           ;Lectura dummy
21fe 20 1e                              bra return_rrtc
2200 81 09              next2`          cmpa #9             ;Ultimo lista?
2202 26 08                              bne next3`
2204 4d e2 28                           bclr IBCR,$28       ;borra el no ack (8) y manda señal de stop (2)
2207 4c e2 10                           bset IBCR,$10       ;pasa a modo tx      
220a 20 12                              bra return_rrtc
220c 81 08              next3`          cmpa #8             ;Penultima?     FIXME: esto significa que no se lee el ultimo dato?
220e 26 03                              bne next4`
2210 4c e2 08                           bset IBCR,$08       ;Pone un no ack       
2213 43                 next4`          deca
2214 43                                 deca
2215 43                                 deca                ;A -3 porque se consideran las primeras 3 interrupciones en el index
2216 ce 10 40                           ldx #T_Read_RTC
2219 18 09 e4 00 e4                     movb IBDR,A,X       ;Se mueve el dato a la posicion deseada
                        
221e 72 10 25           return_rrtc     inc Index_RTC           
2221 3d                                 rts
                        
                        
                        
                        
                        ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        ;   Subrutina WRITE_RTC
                        ;################################################################################################################################################
                        ;Descripcion:   
                                ;Escritura de ds1307
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################                
                        
                                        loc
2222 4e e3 02 2b        WRITE_RTC:      brset IBSR,$02,error_wrtc       ;No se recibe el ack
2226 b6 10 25                           ldaa Index_RTC
2229 26 08                              bne next`
222b 18 0c 10 28 00 e4                  movb Dir_Seg,IBDR       ;Mandar la direccion de la primera palabra es decir segundos                
2231 20 1a                              bra return_wrtc
2233 81 07              next`           cmpa #7
2235 27 12                              beq finishwrite`
2237 43                                 deca                    ;offset de -1 porque se toma en cuenta el envio de la direccion
2238 ce 10 2b                           ldx #T_WRITE_RTC
223b 18 0d e4 00 e4                     movb A,X,IBDR           ;Mandar el dato correspondiente segun el index 
2240 81 06                              cmpa #6                 ;Es el ultimo dato?
2242 26 09                              bne return_wrtc         ;Cuano es el ultimo se envia señal de stop
2244 4d e2 20                           bclr IBCR,$20                        
                                        
2247 20 04                              bra return_wrtc
                                        
                                        
2249 1c 10 01 01        finishwrite`    bset BANDERAS,$01
224d 72 10 25           return_wrtc:    inc Index_RTC
2250 3d                                 rts 
2251 18 0b ff 10 0c     error_wrtc:     movb #$FF,LEDS                  ;Enciende todos los leds como alarma
2256 20 f5                              bra return_wrtc
                        
                        
                        
                        ;################################################
                        ;################################################
                        ;################################################
                        ;       Subrutinas de atencion de interrupciones
                        
                        ;       Subrutinas PH
                        ;        subrutina de PHO
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                        
                                        loc
2258 1e 02 67 01 0f     PTH_ISR:        brset PIFH,$01,PH0_ISR 
225d 1e 02 67 02 30                     brset PIFH,$02,PH1_ISR
2262 1e 02 67 04 44                     brset PIFH,$04,PH2_ISR
2267 1e 02 67 08 4f                     brset PIFH,$08,PH3_ISR
                        
                        ;       subrutina PH1
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
226c 1c 02 67 01        PH0_ISR:        bset PIFH, $01  
                                        
2270 f7 10 46                           tst CONT_REB
2273 26 35                              bne returnPH                 
2275 18 0b 02 10 46                     movb #2,CONT_REB
                                        ;INICIO de comunicaciones en escritura
227a 1d 10 01 80                        bclr BANDERAS,$80 ;MODOEscritura         
227e 1d 10 01 10                        bclr BANDERAS,$10       ;Reset de alarma
2282 18 0b f0 00 e2                     movb #$F0,IBCR                 ;IBEN 1, IBIE 1 MS 1(START), TX 1 txak 0(Para calling address no importa),RSTA 0                
2287 18 0c 10 26 00 e4                  movb Dir_WR,IBDR               ;Se envia direccion de escritura                         
                                           
                                                  
228d 79 10 25                           clr Index_RTC             ;Index en 0
2290 20 18                              bra returnPH
                        
                        ;       subrutina PH1
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
2292 1c 02 67 02        PH1_ISR:        bset PIFH, $02 
2296 f7 10 46                           tst CONT_REB
2299 26 0f                              bne returnPH                
229b 18 0b 02 10 46                     movb #2,CONT_REB                         
22a0 18 0b 10 00 40                     movb #$10, TIOS
22a5 18 0b 10 00 4c                     movb #$10, TIE      ;Se deshabilitan las interrupciones de OC5
22aa 0b                 returnPH:       rti
                        ;       subrutina PH2
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################                
22ab 1c 02 67 04        PH2_ISR:        bset PIFH, $04
22af b6 10 02                           ldaa BRILLO
22b2 27 f6                              beq returnPH
22b4 80 05                              suba #5
22b6 7a 10 02                           staa BRILLO
22b9 20 ef                              bra returnPH
                        ;       subrutina PH3
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
22bb 1c 02 67 08        PH3_ISR:        bset PIFH, $08
22bf b6 10 02                           ldaa BRILLO
22c2 81 64                              cmpa #100
22c4 27 e4                              beq returnPH
22c6 8b 05                              adda #5
22c8 7a 10 02                           staa BRILLO
22cb 20 dd                              bra returnPH                
                        
                        
                        
                        ;       subrutina de rti
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                                        loc
22cd 4c 37 80           RTI_ISR:        bset CRGFLG, $80
22d0 f7 10 46                           tst CONT_REB
22d3 27 03                              beq checkREAD
22d5 73 10 46                           dec CONT_REB
22d8 f7 10 00           checkREAD:      tst CONT_RTI        ;Se verifica que el contador llegue a 0 es decir 1 s
22db 27 05                              beq initREAD
22dd 73 10 00                           dec CONT_RTI
22e0 20 1a                              bra return`
22e2 18 0b 14 10 00     initREAD:       movb #20,CONT_RTI   ;Reset contador
22e7 1f 10 01 01 10                     brclr BANDERAS,$01,return`                
                                        ;INICIO de comunicaciones en LECTURA
22ec 1c 10 01 80                        bset BANDERAS,$80 ; MODOLectura         
22f0 18 0c 10 26 00 e4                  movb Dir_WR,IBDR                ;Mando la direccion de escritura para resetear el puntero de memoria DS1307
                                        ;movb #$F0,IBCR                 ;IBEN 1, IBIE 1 MS 1(START), TX 1 txak 0(Para calling address no importa),RSTA 0
22f6 4c e2 30                           bset IBCR,$30
22f9 79 10 25                           clr Index_RTC             ;Index en 0
                        
22fc 0b                 return`         rti
                        
                        
                        ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        ;   Subrutina OC4
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################
                                        loc
22fd b6 10 04           OC4_ISR:        ldaa CONT_TICKS
2300 c6 64                              ldab #100
2302 f0 10 02                           subb BRILLO
2305 18 17                              cba
2307 2c 0f                              bge apagar`
2309 f7 10 04                           tst CONT_TICKS
230c 27 2c                              beq check_digit`
230e 81 64              checkN`         cmpa #100
2310 27 12                              beq changeDigit`
2312 72 10 04           incticks`       inc CONT_TICKS
2315 06 23 a1                           jmp part2`
                        ;Apagar
2318 18 0b ff 02 58     apagar`         movb #$FF,PTP
231d 18 0b 00 00 01                     movb #$0, PORTB
2322 20 ea                              bra checkN`
                        ;           cambiar digito
2324 18 0b 00 10 04     changeDigit`    movb #$0, CONT_TICKS
2329 72 10 03                           inc CONT_DIG
232c 86 06                              ldaa #6
232e b1 10 03                           cmpa CONT_DIG
2331 26 05                              bne jpart2`                 ;no me alcanzo para hacer el primer salto 
2333 18 0b 01 10 03                     movb #1,CONT_DIG
2338 20 67              jpart2`         bra part2`
                        ;           encender digito
233a b6 10 03           check_digit`    ldaa CONT_DIG
233d 81 01                              cmpa #1
233f 26 10                              bne dig2`
2341 1d 02 58 08                        bclr PTP, $08
2345 18 0c 10 08 00 01                  movb DISP1, PORTB
234b 1c 02 68 02                        bset PTJ, $02
234f 20 c1                              bra  incticks`
2351 81 02              dig2`           cmpa #2
2353 26 13                              bne dig3`
2355 1d 02 58 04                        bclr PTP, $04
2359 b6 10 09                           ldaa DISP2
235c 18 0c 10 09 00 01                  movb DISP2, PORTB
2362 1c 02 68 02                        bset PTJ, $02
2366 20 aa              ndig2`          bra  incticks`
2368 81 03              dig3`           cmpa #3
236a 26 10                              bne dig4`
236c 1d 02 58 02                        bclr PTP, $02                
2370 18 0c 10 0a 00 01                  movb DISP3, PORTB
2376 1c 02 68 02                        bset PTJ, $02
237a 20 96              ndig3`          bra  incticks`
237c 81 04              dig4`           cmpa #4
237e 26 14                              bne digleds`
2380 1d 02 58 01                        bclr PTP, $01
2384 b6 10 0b                           ldaa DISP4
2387 18 0c 10 0b 00 01                  movb DISP4, PORTB
238d 1c 02 68 02                        bset PTJ, $02
2391 06 23 12           ndig4`          jmp  incticks`
2394 18 0c 10 0c 00 01  digleds`        movb LEDS, PORTB
239a 1d 02 68 02                        bclr PTJ, $02
239e 72 10 04                           inc CONT_TICKS
                        
                        
23a1 f7 10 19           part2`          tst CONT_DELAY
23a4 27 03                              beq tst7seg`
23a6 73 10 19                           dec CONT_DELAY
23a9 fe 10 17           tst7seg`        ldx CONT_7SEG
23ac 27 0c                              beq JBCD_7SEG`
23ae 09                                 dex
23af 7e 10 17                           stx CONT_7SEG
23b2 dc 44              returnOC4       ldd TCNT
23b4 c3 00 3c                           addd #60
23b7 5c 58                              std TC4
                                        ;bset TFLG1,$10          ;Se borra la bandera manualmente ERROR
23b9 0b                                 rti
23ba 18 03 01 f4 10 17  JBCD_7SEG`      movw #500,CONT_7SEG
23c0 16 20 bd                           jsr BCD_7SEG
23c3 20 ed                              bra returnOC4
                        
                        
                        
                        ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        ;   Subrutina OC5
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################                
                                        loc
23c5 dc 44              OC5_ISR:        ldd TCNT
23c7 c3 00 4b                           addd #75
23ca 5c 5a                              std TC5                
23cc 0b                                 rti
                        
                        
                        
                        ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        ;   Subrutina IIC
                        ;################################################################################################################################################
                        ;Descripcion:
                        
                        
                        ;Paso de parametros:
                        ;Entrada:
                        ;Salida:
                        ;################################################################################################################################################                
                        
                                        loc
23cd 4c e3 20           IIC_ISR:        bset IBSR,$20
23d0 1e 10 01 80 05                     brset BANDERAS,$80,jLectura
23d5 16 22 22                           jsr WRITE_RTC     
23d8 20 03                              bra return_IIC
23da 16 21 d9           jLectura:       jsr READ_RTC
23dd 0b                 return_IIC:     rti
                        
                        
                        
                        
                        

Executed: Tue Dec 03 21:01:27 2019
Total cycles: 1115, Total bytes: 1060
Total errors: 0, Total warnings: 0
