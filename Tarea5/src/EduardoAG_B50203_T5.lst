
as12, an absolute assembler for Motorola MCU's, version 1.2h

                        ;#################################################################
                        ;
                        ;
                        ;               Tarea 5
                        ;               Eduardo Alfaro Gonzalez
                        ;               B50203
                        ;               Pantalla
                        ;               Ultima vez modificado 4/11/19
                        ;
                        ;
                        ;#################################################################
                        #include registers.inc
                        ; Memory maps and register equates
                        ; Choose one of DBUG12MAP (normal operation under DBUG12)
                        ;               EEPROMMAP  (DBUG12 in EEPROM mode)
                        ;               FLASHMAP   (Program loaded into Flash ROM)
0000                    DBUG12MAP equ 0        ; Memory mode is DBUG12MAP
                        ; EEPROMMAP equ 0         ; Memory mode is EEPROMMAP
                        #ifdef DBUG12MAP
0000                    REGBASE        equ        $0        ; register base
1000                    DATASTART equ        $1000        ; Start of data memory
2000                    DATAEND  equ        $2000        ; Stack pointer initial value (end of data RAM area)
2000                    PRSTART equ        $2000        ; Start of program memory (might be ROM)
3bff                    PREND        equ        $3BFF        ; End of program memory
                        
                        ; Functions in D-Bug12
ee84                    Getchar        equ        $EE84        ; Implemented in emulator
ee86                    Putchar equ        $EE86   ; Implemented in emulator
ee88                    Printf  equ     $EE88
ee8a                    GetCmdLine equ  $EE8A   ; FAR call
ee8e                    Sscanhex equ        $EE8E   ; FAR call
ee92                    Isxdigit equ    $EE92
ee94                    Toupper equ     $EE94
ee96                    Isalpha equ     $EE96
ee98                    Strlen  equ     $EE98
ee9a                    Strcpy  equ     $EE9A
ee9c                    Out2hex equ     $EE9C   ; FAR call
eea0                    Out4hex equ     $EEA0   ; FAR call
eea4                    SetUserVector equ $EEA4 ; No longer used
eea6                    WriteEEByte equ $EEA6   ; FAR call
eeaa                    EraseEE equ     $EEAA   ; FAR call
eeae                    ReadMem equ     $EEAE   ; FAR call
eeb2                    WriteMem equ    $EEB2   ; FAR call
                        
3e00                    VECTORTABLE equ $3E00        ; Vectors go here SHOULD ALSO INITIALIZE AT RUNTIME
0000                    STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
0000                    INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef EEPROMMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $3E00        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $400        ; Start of program memory
                        PREND        equ        $FFF        ; End of program memory
                        
                        VECTORTABLE equ $3E00        ; Vectors go here -- MUST BE INITIALIZED AT RUNTIME
                        INITIALIZEVECTORS equ 0        ; Initialize vectors at runtime
                        #endif
                        
                        #ifdef FLASHMAP
                        REGBASE        equ        $0        ; register base MAY BE MOVED TO MAKE FULL EEPROM ACCESSABLE
                        DATASTART equ        $1000        ; Start of data memory
                        DATAEND  equ        $4000        ; Stack pointer initial value (end of data RAM area)
                        PRSTART equ        $8000        ; Start of program memory
                        ; Note -- there are problems using the current free assemblers with paged memory
                        ; Best bet is to use logical addresses $8000 up only, set page register to 3E,
                        ; Change S1 records for $8000-BFFF to S2 records for page 3E and S1 records for $C000-$EFFF to
                        ; page 3F. Program startup vector goes in EFFE, and needs to be iin page 3F so PPAGE can be changed. 
                        PREND        equ        $EF7F        ; End of program memory
                        
                        VECTORTABLE equ $EF80        ; Vectors go here -- MUST BE INITIALIZED STATICALLY
                        STATICVECTORS equ 0        ; Define vectors statically (in "ROM")
                        #endif
                        
                        
1000                    RAMSTART equ        DATASTART ; For compatibility
2000                    RAMEND equ        DATAEND   
                        
3e00                    UserRsrv0x80 equ (0*2)+VECTORTABLE
3e02                    UserRsrv0x82 equ (1*2)+VECTORTABLE
3e04                    UserRsrv0x84 equ (2*2)+VECTORTABLE
3e06                    UserRsrv0x86 equ (3*2)+VECTORTABLE
3e08                    UserRsrv0x88 equ (4*2)+VECTORTABLE
3e0a                    UserRsrv0x8a equ (5*2)+VECTORTABLE
3e0c                    UserPWMShDn equ (6*2)+VECTORTABLE
3e0e                    UserPortP equ (7*2)+VECTORTABLE
3e10                    UserMSCAN4Tx equ (8*2)+VECTORTABLE
3e12                    UserMSCAN4Rx equ (9*2)+VECTORTABLE
3e14                    UserMSCAN4Errs equ (10*2)+VECTORTABLE
3e16                    UserMSCAN4Wake equ (11*2)+VECTORTABLE
3e18                    UserMSCAN3Tx equ (12*2)+VECTORTABLE
3e1a                    UserMSCAN3Rx equ (13*2)+VECTORTABLE
3e1c                    UserMSCAN3Errs equ (14*2)+VECTORTABLE
3e1e                    UserMSCAN3Wake equ (15*2)+VECTORTABLE
3e20                    UserMSCAN2Tx equ (16*2)+VECTORTABLE
3e22                    UserMSCAN2Rx equ (17*2)+VECTORTABLE
3e24                    UserMSCAN2Errs equ (18*2)+VECTORTABLE
3e26                    UserMSCAN2Wake equ (19*2)+VECTORTABLE
3e28                    UserMSCAN1Tx equ (20*2)+VECTORTABLE
3e2a                    UserMSCAN1Rx equ (21*2)+VECTORTABLE
3e2c                    UserMSCAN1Errs equ (22*2)+VECTORTABLE
3e2e                    UserMSCAN1Wake equ (23*2)+VECTORTABLE
3e30                    UserMSCAN0Tx equ (24*2)+VECTORTABLE
3e32                    UserMSCAN0Rx equ (25*2)+VECTORTABLE
3e34                    UserMSCAN0Errs equ (26*2)+VECTORTABLE
3e36                    UserMSCAN0Wake equ (27*2)+VECTORTABLE
3e38                    UserFlash equ (28*2)+VECTORTABLE
3e3a                    UserEEPROM equ (29*2)+VECTORTABLE
3e3c                    UserSPI2 equ (30*2)+VECTORTABLE
3e3e                    UserSPI1 equ (31*2)+VECTORTABLE
3e40                    UserIIC equ (32*2)+VECTORTABLE
3e42                    UserDLC equ (33*2)+VECTORTABLE
3e44                    UserSCME equ (34*2)+VECTORTABLE
3e46                    UserCRG equ (35*2)+VECTORTABLE
3e48                    UserPAccBOv equ (36*2)+VECTORTABLE
3e4a                    UserModDwnCtr equ (37*2)+VECTORTABLE
3e4c                    UserPortH equ (38*2)+VECTORTABLE
3e4e                    UserPortJ equ (39*2)+VECTORTABLE
3e50                    UserAtoD1 equ (40*2)+VECTORTABLE
3e52                    UserAtoD0 equ (41*2)+VECTORTABLE
3e54                    UserSCI1 equ (42*2)+VECTORTABLE
3e56                    UserSCI0 equ (43*2)+VECTORTABLE
3e58                    UserSPI0 equ (44*2)+VECTORTABLE
3e5a                    UserPAccEdge equ (45*2)+VECTORTABLE
3e5c                    UserPAccOvf equ (46*2)+VECTORTABLE
3e5e                    UserTimerOvf equ (47*2)+VECTORTABLE
3e60                    UserTimerCh7 equ (48*2)+VECTORTABLE
3e62                    UserTimerCh6 equ (49*2)+VECTORTABLE
3e64                    UserTimerCh5 equ (50*2)+VECTORTABLE
3e66                    UserTimerCh4 equ (51*2)+VECTORTABLE
3e68                    UserTimerCh3 equ (52*2)+VECTORTABLE
3e6a                    UserTimerCh2 equ (53*2)+VECTORTABLE
3e6c                    UserTimerCh1 equ (54*2)+VECTORTABLE
3e6e                    UserTimerCh0 equ (55*2)+VECTORTABLE
3e70                    UserRTI equ (56*2)+VECTORTABLE
3e72                    UserIRQ equ (57*2)+VECTORTABLE
3e74                    UserXIRQ equ (58*2)+VECTORTABLE
3e76                    UserSWI equ (59*2)+VECTORTABLE
3e78                    UserTrap equ (60*2)+VECTORTABLE
                        
                        
                        *
                        *
                        *  HC12 i/o register locations (9s12dp256)
                        *
                        *
0000                    PORTA:          equ REGBASE+0   ;port a = address lines a8 - a15
0001                    PORTB:          equ REGBASE+1   ;port b = address lines a0 - a7
0002                    DDRA:           equ REGBASE+2   ;port a direction register
0003                    DDRB:           equ REGBASE+3   ;port b direction register
                        
0008                    PORTE:          equ REGBASE+8   ;port e = mode,irq and control signals
0009                    DDRE:           equ REGBASE+9   ;port e direction register
000a                    PEAR:           equ REGBASE+$a  ;port e assignments
000b                    MODE:           equ REGBASE+$b  ;mode register
000c                    PUCR:           equ REGBASE+$c  ;port pull-up control register
000d                    RDRIV:          equ REGBASE+$d  ;port reduced drive control register
000e                    EBICTL:                equ REGBASE+$e  ;e stretch control
                        
0010                    INITRM:         equ REGBASE+$10 ;ram location register
0011                    INITRG:         equ REGBASE+$11 ;register location register
0012                    INITEE:         equ REGBASE+$12 ;eeprom location register
0013                    MISC:           equ REGBASE+$13 ;miscellaneous mapping control
0014                    MTST0:          equ REGBASE+$14 ; reserved
0015                    ITCR:           equ REGBASE+$15 ;interrupt test control register
0016                    ITEST:          equ REGBASE+$16 ;interrupt test register
0017                    MTST1:          equ REGBASE+$17 ; reserved
                        
001a                    PARTIDH:        equ REGBASE+$1a ;part id high
001b                    PARTIDL:        equ REGBASE+$1b ;part id low
001c                    MEMSIZ0:        equ REGBASE+$1c ;memory size
001d                    MEMSIZ1:        equ REGBASE+$1d ;memory size
001e                    IRQCR:          equ REGBASE+$1e ;interrupt control register
001e                    INTCR:          equ REGBASE+$1e ;interrupt control register (old name)
001f                    HPRIO:          equ REGBASE+$1f ;high priority reg
                        
0028                    BKPCT0:         equ REGBASE+$28 ;break control register
0029                    BKPCT1:         equ REGBASE+$29 ;break control register
002a                    BKP0X:          equ REGBASE+$2a ; break 0 index register
002b                    BKP0H:          equ REGBASE+$2b ; break 0 pointer high
002c                    BRP0L:          equ REGBASE+$2c ; break 0 pointer low
002d                    BKP1X:          equ REGBASE+$2d ; break 1 index register
002e                    BKP1H:          equ REGBASE+$2e ; break 1 pointer high
002f                    BRP1L:          equ REGBASE+$2f ; break 1 pointer low
0030                    PPAGE:                equ REGBASE+$30 ;program page register
                        
0032                    PORTK:                equ REGBASE+$32 ;port k data
0033                    DDRK:                equ REGBASE+$33 ;port k direction
                        
0034                    SYNR:           equ REGBASE+$34 ; synthesizer / multiplier register
0035                    REFDV:          equ REGBASE+$35 ; reference divider register
0036                    CTFLG:          equ REGBASE+$36 ; reserved
0037                    CRGFLG:         equ REGBASE+$37 ; pll flags register
0038                    CRGINT:         equ REGBASE+$38 ; pll interrupt register
0039                    CLKSEL:         equ REGBASE+$39 ; clock select register
003a                    PLLCTL:         equ REGBASE+$3a ; pll control register
003b                    RTICTL:         equ REGBASE+$3b ;real time interrupt control
003c                    COPCTL:         equ REGBASE+$3c ;watchdog control
003d                    FORBYP:         equ REGBASE+$3d ;
003e                    CTCTL:          equ REGBASE+$3e ;
003f                    ARMCOP:         equ REGBASE+$3f ;cop reset register
                        
0040                    TIOS:           equ REGBASE+$40 ;timer input/output select
0041                    CFORC:          equ REGBASE+$41 ;timer compare force
0042                    OC7M:           equ REGBASE+$42 ;timer output compare 7 mask
0043                    OC7D:           equ REGBASE+$43 ;timer output compare 7 data
0044                    TCNT:           equ REGBASE+$44 ;timer counter register hi
                        *TCNT:          equ REGBASE+$45 ;timer counter register lo
0046                    TSCR:           equ REGBASE+$46 ;timer system control register (Old Name)
0046                    TSCR1:          equ REGBASE+$46 ;timer system control register
0047                    TTOV:           equ REGBASE+$47 ;reserved
0048                    TCTL1:          equ REGBASE+$48 ;timer control register 1
0049                    TCTL2:          equ REGBASE+$49 ;timer control register 2
004a                    TCTL3:          equ REGBASE+$4a ;timer control register 3
004b                    TCTL4:          equ REGBASE+$4b ;timer control register 4
004c                    TMSK1:          equ REGBASE+$4c ;timer interrupt mask 1 (Old Name)
004c                    TIE:            equ REGBASE+$4c ;timer interrupt mask 1
004d                    TMSK2:          equ REGBASE+$4d ;timer interrupt mask 2 (Old Name)
004d                    TSCR2:          equ REGBASE+$4d ;timer interrupt mask 2
004e                    TFLG1:          equ REGBASE+$4e ;timer flags 1
004f                    TFLG2:          equ REGBASE+$4f ;timer flags 2
0050                    TC0:            equ REGBASE+$50 ;timer capture/compare register 0
0052                    TC1:            equ REGBASE+$52 ;timer capture/compare register 1
0054                    TC2:            equ REGBASE+$54 ;timer capture/compare register 2
0056                    TC3:            equ REGBASE+$56 ;timer capture/compare register 3
0058                    TC4:            equ REGBASE+$58 ;timer capture/compare register 4
005a                    TC5:            equ REGBASE+$5a ;timer capture/compare register 5
005c                    TC6:            equ REGBASE+$5c ;timer capture/compare register 6
005e                    TC7:            equ REGBASE+$5e ;timer capture/compare register 7
0060                    PACTL:          equ REGBASE+$60 ;pulse accumulator controls
0061                    PAFLG:          equ REGBASE+$61 ;pulse accumulator flags
0062                    PACN3:          equ REGBASE+$62 ;pulse accumulator counter 3
0063                    PACN2:          equ REGBASE+$63 ;pulse accumulator counter 2
0064                    PACN1:          equ REGBASE+$64 ;pulse accumulator counter 1
0065                    PACN0:          equ REGBASE+$65 ;pulse accumulator counter 0
0066                    MCCTL:          equ REGBASE+$66 ;modulus down conunter control
0067                    MCFLG:          equ REGBASE+$67 ;down counter flags
0068                    ICPAR:          equ REGBASE+$68 ;input pulse accumulator control
0069                    DLYCT:          equ REGBASE+$69 ;delay count to down counter
006a                    ICOVW:          equ REGBASE+$6a ;input control overwrite register
006b                    ICSYS:          equ REGBASE+$6b ;input control system control
                        
006d                    TIMTST:         equ REGBASE+$6d ;timer test register
                        
0070                    PBCTL:          equ REGBASE+$70 ; pulse accumulator b control
0071                    PBFLG:          equ REGBASE+$71 ; pulse accumulator b flags
0072                    PA3H:           equ REGBASE+$72 ; pulse accumulator holding register 3
0073                    PA2H:           equ REGBASE+$73 ; pulse accumulator holding register 2
0074                    PA1H:           equ REGBASE+$74 ; pulse accumulator holding register 1
0075                    PA0H:           equ REGBASE+$75 ; pulse accumulator holding register 0
0076                    MCCNT:          equ REGBASE+$76 ; modulus down counter register
                        *MCCNTL:        equ REGBASE+$77 ; low byte
0078                    TCOH:           equ REGBASE+$78 ; capture 0 holding register
007a                    TC1H:           equ REGBASE+$7a ; capture 1 holding register
007c                    TC2H:           equ REGBASE+$7c ; capture 2 holding register
007e                    TC3H:           equ REGBASE+$7e ; capture 3 holding register
                        
0080                    ATD0CTL0:       equ REGBASE+$80 ;adc control 0 (reserved)
0081                    ATD0CTL1:       equ REGBASE+$81 ;adc control 1 (reserved)
0082                    ATD0CTL2:       equ REGBASE+$82 ;adc control 2
0083                    ATD0CTL3:       equ REGBASE+$83 ;adc control 3
0084                    ATD0CTL4:       equ REGBASE+$84 ;adc control 4
0085                    ATD0CTL5:       equ REGBASE+$85 ;adc control 5
0086                    ATD0STAT:       equ REGBASE+$86 ;adc status register hi
0086                    ATD0STAT0:      equ REGBASE+$86 ;adc status register hi
008b                    ATD0STAT1:      equ REGBASE+$8b ;adc status register lo
0088                    ATD0TEST:       equ REGBASE+$88 ;adc test (reserved)
                        *atd0test       equ REGBASE+$89 ;
                        
008d                    ATD0DIEN:        equ REGBASE+$8d ;
                        
008f                    PORTAD:         equ REGBASE+$8f ;port adc = input only
0090                    ADR00H:         equ REGBASE+$90 ;adc result 0 register
0092                    ADR01H:         equ REGBASE+$92 ;adc result 1 register
0094                    ADR02H:         equ REGBASE+$94 ;adc result 2 register
0096                    ADR03H:         equ REGBASE+$96 ;adc result 3 register
0098                    ADR04H:         equ REGBASE+$98 ;adc result 4 register
009a                    ADR05H:         equ REGBASE+$9a ;adc result 5 register
009c                    ADR06H:         equ REGBASE+$9c ;adc result 6 register
009e                    ADR07H:         equ REGBASE+$9e ;adc result 7 register
                        
00a0                    PWME:                equ REGBASE+$a0 ;pwm enable
00a1                    PWMPOL:         equ REGBASE+$a1 ;pwm polarity
00a2                    PWMCLK:         equ REGBASE+$a2 ;pwm clock select register
00a3                    PWMPRCLK:       equ REGBASE+$a3 ;pwm prescale clock select register
00a4                    PWMCAE:         equ REGBASE+$a4 ;pwm center align select register
00a5                    PWMCTL:         equ REGBASE+$a5 ;pwm control register
00a6                    PWMTST:         equ REGBASE+$a6 ;reserved
00a7                    PWMPRSC:        equ REGBASE+$a7 ;reserved
00a8                    PWMSCLA:        equ REGBASE+$a8 ;pwm scale a
00a9                    PWMSCLB:        equ REGBASE+$a9 ;pwm scale b
00aa                    PWMSCNTA:       equ REGBASE+$aa ;reserved
00ab                    PWMSCNTB:       equ REGBASE+$ab ;reserved
00ac                    PWMCNT0:        equ REGBASE+$ac ;pwm channel 0 counter
00ad                    PWMCNT1:        equ REGBASE+$ad ;pwm channel 1 counter
00ae                    PWMCNT2:        equ REGBASE+$ae ;pwm channel 2 counter
00af                    PWMCNT3:        equ REGBASE+$af ;pwm channel 3 counter
00b0                    PWMCNT4:        equ REGBASE+$b0 ;pwm channel 4 counter
00b1                    PWMCNT5:        equ REGBASE+$b1 ;pwm channel 5 counter
00b2                    PWMCNT6:        equ REGBASE+$b2 ;pwm channel 6 counter
00b3                    PWMCNT7:        equ REGBASE+$b3 ;pwm channel 7 counter
00b4                    PWMPER0:        equ REGBASE+$b4 ;pwm channel 0 period
00b5                    PWMPER1:        equ REGBASE+$b5 ;pwm channel 1 period
00b6                    PWMPER2:        equ REGBASE+$b6 ;pwm channel 2 period
00b7                    PWMPER3:        equ REGBASE+$b7 ;pwm channel 3 period
00b8                    PWMPER4:        equ REGBASE+$b8 ;pwm channel 4 period
00b9                    PWMPER5:        equ REGBASE+$b9 ;pwm channel 5 period
00ba                    PWMPER6:        equ REGBASE+$ba ;pwm channel 6 period
00bb                    PWMPER7:        equ REGBASE+$bb ;pwm channel 7 period
00bc                    PWMDTY0:        equ REGBASE+$bc ;pwm channel 0 duty cycle
00bd                    PWMDTY1:        equ REGBASE+$bd ;pwm channel 1 duty cycle
00be                    PWMDTY2:        equ REGBASE+$be ;pwm channel 2 duty cycle
00bf                    PWMDTY3:        equ REGBASE+$bf ;pwm channel 3 duty cycle
00c0                    PWMDTY4:        equ REGBASE+$c0 ;pwm channel 4 duty cycle
00c1                    PWMDTY5:        equ REGBASE+$c1 ;pwm channel 5 duty cycle
00c2                    PWMDTY6:        equ REGBASE+$c2 ;pwm channel 6 duty cycle
00c3                    PWMDTY7:        equ REGBASE+$c3 ;pwm channel 7 duty cycle
00c4                    PWMSDN:         equ REGBASE+$c4 ;pwm shutdown register
                        
00c8                    SC0BDH:         equ REGBASE+$c8 ;sci 0 baud reg hi byte
00c9                    SC0BDL:         equ REGBASE+$c9 ;sci 0 baud reg lo byte
00ca                    SC0CR1:         equ REGBASE+$ca ;sci 0 control1 reg
00cb                    SC0CR2:         equ REGBASE+$cb ;sci 0 control2 reg
00cc                    SC0SR1:         equ REGBASE+$cc ;sci 0 status reg 1
00cd                    SC0SR2:         equ REGBASE+$cd ;sci 0 status reg 2
00ce                    SC0DRH:         equ REGBASE+$ce ;sci 0 data reg hi
00cf                    SC0DRL:         equ REGBASE+$cf ;sci 0 data reg lo
                        
00d0                    SC1BDH:         equ REGBASE+$d0 ;sci 1 baud reg hi byte
00d1                    SC1BDL:         equ REGBASE+$d1 ;sci 1 baud reg lo byte
00d2                    SC1CR1:         equ REGBASE+$d2 ;sci 1 control1 reg
00d3                    SC1CR2:         equ REGBASE+$d3 ;sci 1 control2 reg
00d4                    SC1SR1:         equ REGBASE+$d4 ;sci 1 status reg 1
00d5                    SC1SR2:         equ REGBASE+$d5 ;sci 1 status reg 2
00d6                    SC1DRH:         equ REGBASE+$d6 ;sci 1 data reg hi
00d7                    SC1DRL:         equ REGBASE+$d7 ;sci 1 data reg lo
                        
00d8                    SPI0CR1:        equ REGBASE+$d8 ;spi 0 control1 reg
00d9                    SPI0CR2:        equ REGBASE+$d9 ;spi 0 control2 reg
00da                    SPI0BR:         equ REGBASE+$da ;spi 0 baud reg
00db                    SPI0SR:         equ REGBASE+$db ;spi 0 status reg hi
00dd                    SP0DR:          equ REGBASE+$dd ;spi 0 data reg  FOR COMPATIBILITY
00dd                    SPI0DR:          equ REGBASE+$dd ;spi 0 data reg
                        
00e0                    IBAD:                equ REGBASE+$e0 ;i2c bus address register
00e1                    IBFD:                equ REGBASE+$e1 ;i2c bus frequency divider
00e2                    IBCR:                equ REGBASE+$e2 ;i2c bus control register
00e3                    IBSR:                equ REGBASE+$e3 ;i2c bus status register
00e4                    IBDR:                equ REGBASE+$e4 ;i2c bus message data register
                        
00e8                    DLCBCR1:        equ REGBASE+$e8 ;bdlc control regsiter 1
00e9                    DLCBSVR:        equ REGBASE+$e9 ;bdlc state vector register
00ea                    DLCBCR2:        equ REGBASE+$ea ;bdlc control register 2
00eb                    DLCBDR:                equ REGBASE+$eb ;bdlc data register
00ec                    DLCBARD:        equ REGBASE+$ec ;bdlc analog delay register
00ed                    DLCBRSR:        equ REGBASE+$ed ;bdlc rate select register
00ee                    DLCSCR:                equ REGBASE+$ee ;bdlc control register
00ef                    DLCBSTAT:        equ REGBASE+$ef ;bdlc status register
                        
00f0                    SPI1CR1:        equ REGBASE+$f0 ;spi 1 control1 reg
00f1                    SPI1CR2:        equ REGBASE+$f1 ;spi 1 control2 reg
00f2                    SPI1BR:         equ REGBASE+$f2 ;spi 1 baud reg
00f3                    SPI1SR:         equ REGBASE+$f3 ;spi 1 status reg hi
00f5                    SPI1DR:          equ REGBASE+$f5 ;spi 1 data reg
00f5                    SP1DR:          equ REGBASE+$f5 ;spi 1 data reg   FOR COMPATIBILITY
                        
00f8                    SPI2CR1:        equ REGBASE+$f8 ;spi 2 control1 reg
00f9                    SPI2CR2:        equ REGBASE+$f9 ;spi 2 control2 reg
00fa                    SPI2BR:         equ REGBASE+$fa ;spi 2 baud reg
00fb                    SPI2SR:         equ REGBASE+$fb ;spi 2 status reg hi
00fd                    SPI2DR:         equ REGBASE+$fd ;spi 2 data reg
00fd                    SP2DR:          equ REGBASE+$fd ;spi 2 data reg   FOR COMPATIBILITY
                        
0100                    FCLKDIV:        equ REGBASE+$100 ;flash clock divider
0101                    FSEC:                equ REGBASE+$101 ;flash security register
                        
0103                    FCNFG:                equ REGBASE+$103 ;flash configuration register
0104                    FPROT:                equ REGBASE+$104 ;flash protection register
0105                    FSTAT:                equ REGBASE+$105 ;flash status register
0106                    FCMD:                equ REGBASE+$106 ;flash command register
                        
0110                    ECLKDIV:        equ REGBASE+$110 ;eeprom clock divider
                        
0113                    ECNFG:                equ REGBASE+$113 ;eeprom configuration register
0114                    EPROT:                equ REGBASE+$114 ;eeprom protection register
0115                    ESTAT:                equ REGBASE+$115 ;eeprom status register
0116                    ECMD:                equ REGBASE+$116 ;eeprom command register
                        
0120                    ATD1CTL0:       equ REGBASE+$120 ;adc1 control 0 (reserved)
0121                    ATD1CTL1:       equ REGBASE+$121 ;adc1 control 1 (reserved)
0122                    ATD1CTL2:       equ REGBASE+$122 ;adc1 control 2
0123                    ATD1CTL3:       equ REGBASE+$123 ;adc1 control 3
0124                    ATD1CTL4:       equ REGBASE+$124 ;adc1 control 4
0125                    ATD1CTL5:       equ REGBASE+$125 ;adc1 control 5
0126                    ATD1STAT0:      equ REGBASE+$126 ;adc1 status register hi
012b                    ATD1STAT1:      equ REGBASE+$12b ;adc1 status register lo
0128                    ATD1TEST:       equ REGBASE+$128 ;adc1 test (reserved)
                        *atd1test       equ REGBASE+$129 ;
                        
012d                    ATDDIEN:        equ REGBASE+$12d ;adc1 input enable register
                        
012f                    PORTAD1:        equ REGBASE+$12f ;port adc1 = input only
0130                    ADR10H:         equ REGBASE+$130 ;adc1 result 0 register
0132                    ADR11H:         equ REGBASE+$132 ;adc1 result 1 register
0134                    ADR12H:         equ REGBASE+$134 ;adc1 result 2 register
0136                    ADR13H:         equ REGBASE+$136 ;adc1 result 3 register
0138                    ADR14H:         equ REGBASE+$138 ;adc1 result 4 register
013a                    ADR15H:         equ REGBASE+$13a ;adc1 result 5 register
013c                    ADR16H:         equ REGBASE+$13c ;adc1 result 6 register
013e                    ADR17H:         equ REGBASE+$13e ;adc1 result 7 register
                        
0140                    CAN0CTL0:        equ REGBASE+$140 ;can0 control register 0
0141                    CAN0CTL1:        equ REGBASE+$141 ;can0 control register 1
0142                    CAN0BTR0:        equ REGBASE+$142 ;can0 bus timing register 0
0143                    CAN0BTR1:        equ REGBASE+$143 ;can0 bus timing register 1
0144                    CAN0RFLG:        equ REGBASE+$144 ;can0 receiver flags
0145                    CAN0RIER:        equ REGBASE+$145 ;can0 receiver interrupt enables
0146                    CAN0TFLG:        equ REGBASE+$146 ;can0 transmit flags
0147                    CAN0TIER:        equ REGBASE+$147 ;can0 transmit interrupt enables
0148                    CAN0TARQ:        equ REGBASE+$148 ;can0 transmit message abort control
0149                    CAN0TAAK:        equ REGBASE+$149 ;can0 transmit message abort status
014a                    CAN0TBEL:        equ REGBASE+$14a ;can0 transmit buffer select
014b                    CAN0IDAC:        equ REGBASE+$14b ;can0 identfier acceptance control
                        
014e                    CAN0RERR:        equ REGBASE+$14e ;can0 receive error counter
014f                    CAN0TERR:        equ REGBASE+$14f ;can0 transmit error counter
0150                    CAN0IDA0:        equ REGBASE+$150 ;can0 identifier acceptance register 0
0151                    CAN0IDA1:        equ REGBASE+$151 ;can0 identifier acceptance register 1
0152                    CAN0IDA2:        equ REGBASE+$152 ;can0 identifier acceptance register 2
0153                    CAN0IDA3:        equ REGBASE+$153 ;can0 identifier acceptance register 3
0154                    CAN0IDM0:        equ REGBASE+$154 ;can0 identifier mask register 0
0155                    CAN0IDM1:        equ REGBASE+$155 ;can0 identifier mask register 1
0156                    CAN0IDM2:        equ REGBASE+$156 ;can0 identifier mask register 2
0157                    CAN0IDM3:        equ REGBASE+$157 ;can0 identifier mask register 3
0158                    CAN0IDA4:        equ REGBASE+$158 ;can0 identifier acceptance register 4
0159                    CAN0IDA5:        equ REGBASE+$159 ;can0 identifier acceptance register 5
015a                    CAN0IDA6:        equ REGBASE+$15a ;can0 identifier acceptance register 6
015b                    CAN0IDA7:        equ REGBASE+$15b ;can0 identifier acceptance register 7
015c                    CAN0IDM4:        equ REGBASE+$15c ;can0 identifier mask register 4
015d                    CAN0IDM5:        equ REGBASE+$15d ;can0 identifier mask register 5
015e                    CAN0IDM6:        equ REGBASE+$15e ;can0 identifier mask register 6
015f                    CAN0IDM7:        equ REGBASE+$15f ;can0 identifier mask register 7
0160                    CAN0RXFG:        equ REGBASE+$160 ;can0 rx foreground buffer thru +$16f
0170                    CAN0TXFG:        equ REGBASE+$170 ;can0 tx foreground buffer thru +$17f
                        
0180                    CAN1CTL0:        equ REGBASE+$180 ;can1 control register 0
0181                    CAN1CTL1:        equ REGBASE+$181 ;can1 control register 1
0182                    CAN1BTR0:        equ REGBASE+$182 ;can1 bus timing register 0
0183                    CAN1BTR1:        equ REGBASE+$183 ;can1 bus timing register 1
0184                    CAN1RFLG:        equ REGBASE+$184 ;can1 receiver flags
0185                    CAN1RIER:        equ REGBASE+$185 ;can1 receiver interrupt enables
0186                    CAN1TFLG:        equ REGBASE+$186 ;can1 transmit flags
0187                    CAN1TIER:        equ REGBASE+$187 ;can1 transmit interrupt enables
0188                    CAN1TARQ:        equ REGBASE+$188 ;can1 transmit message abort control
0189                    CAN1TAAK:        equ REGBASE+$189 ;can1 transmit message abort status
018a                    CAN1TBEL:        equ REGBASE+$18a ;can1 transmit buffer select
018b                    CAN1IDAC:        equ REGBASE+$18b ;can1 identfier acceptance control
                        
018e                    CAN1RERR:        equ REGBASE+$18e ;can1 receive error counter
018f                    CAN1TERR:        equ REGBASE+$18f ;can1 transmit error counter
0190                    CAN1IDA0:        equ REGBASE+$190 ;can1 identifier acceptance register 0
0191                    CAN1IDA1:        equ REGBASE+$191 ;can1 identifier acceptance register 1
0192                    CAN1IDA2:        equ REGBASE+$192 ;can1 identifier acceptance register 2
0193                    CAN1IDA3:        equ REGBASE+$193 ;can1 identifier acceptance register 3
0194                    CAN1IDM0:        equ REGBASE+$194 ;can1 identifier mask register 0
0195                    CAN1IDM1:        equ REGBASE+$195 ;can1 identifier mask register 1
0196                    CAN1IDM2:        equ REGBASE+$196 ;can1 identifier mask register 2
0197                    CAN1IDM3:        equ REGBASE+$197 ;can1 identifier mask register 3
0198                    CAN1IDA4:        equ REGBASE+$198 ;can1 identifier acceptance register 4
0199                    CAN1IDA5:        equ REGBASE+$199 ;can1 identifier acceptance register 5
019a                    CAN1IDA6:        equ REGBASE+$19a ;can1 identifier acceptance register 6
019b                    CAN1IDA7:        equ REGBASE+$19b ;can1 identifier acceptance register 7
019c                    CAN1IDM4:        equ REGBASE+$19c ;can1 identifier mask register 4
019d                    CAN1IDM5:        equ REGBASE+$19d ;can1 identifier mask register 5
019e                    CAN1IDM6:        equ REGBASE+$19e ;can1 identifier mask register 6
019f                    CAN1IDM7:        equ REGBASE+$19f ;can1 identifier mask register 7
01a0                    CAN1RXFG:        equ REGBASE+$1a0 ;can1 rx foreground buffer thru +$1af
01b0                    CAN1TXFG:        equ REGBASE+$1b0 ;can1 tx foreground buffer thru +$1bf
                        
01c0                    CAN2CTL0:        equ REGBASE+$1c0 ;can2 control register 0
01c1                    CAN2CTL1:        equ REGBASE+$1c1 ;can2 control register 1
01c2                    CAN2BTR0:        equ REGBASE+$1c2 ;can2 bus timing register 0
01c3                    CAN2BTR1:        equ REGBASE+$1c3 ;can2 bus timing register 1
01c4                    CAN2RFLG:        equ REGBASE+$1c4 ;can2 receiver flags
01c5                    CAN2RIER:        equ REGBASE+$1c5 ;can2 receiver interrupt enables
01c6                    CAN2TFLG:        equ REGBASE+$1c6 ;can2 transmit flags
01c7                    CAN2TIER:        equ REGBASE+$1c7 ;can2 transmit interrupt enables
01c8                    CAN2TARQ:        equ REGBASE+$1c8 ;can2 transmit message abort control
01c9                    CAN2TAAK:        equ REGBASE+$1c9 ;can2 transmit message abort status
01ca                    CAN2TBEL:        equ REGBASE+$1ca ;can2 transmit buffer select
01cb                    CAN2IDAC:        equ REGBASE+$1cb ;can2 identfier acceptance control
                        
01ce                    CAN2RERR:        equ REGBASE+$1ce ;can2 receive error counter
01cf                    CAN2TERR:        equ REGBASE+$1cf ;can2 transmit error counter
01d0                    CAN2IDA0:        equ REGBASE+$1d0 ;can2 identifier acceptance register 0
01d1                    CAN2IDA1:        equ REGBASE+$1d1 ;can2 identifier acceptance register 1
01d2                    CAN2IDA2:        equ REGBASE+$1d2 ;can2 identifier acceptance register 2
01d3                    CAN2IDA3:        equ REGBASE+$1d3 ;can2 identifier acceptance register 3
01d4                    CAN2IDM0:        equ REGBASE+$1d4 ;can2 identifier mask register 0
01d5                    CAN2IDM1:        equ REGBASE+$1d5 ;can2 identifier mask register 1
01d6                    CAN2IDM2:        equ REGBASE+$1d6 ;can2 identifier mask register 2
01d7                    CAN2IDM3:        equ REGBASE+$1d7 ;can2 identifier mask register 3
01d8                    CAN2IDA4:        equ REGBASE+$1d8 ;can2 identifier acceptance register 4
01d9                    CAN2IDA5:        equ REGBASE+$1d9 ;can2 identifier acceptance register 5
01da                    CAN2IDA6:        equ REGBASE+$1da ;can2 identifier acceptance register 6
01db                    CAN2IDA7:        equ REGBASE+$1db ;can2 identifier acceptance register 7
01dc                    CAN2IDM4:        equ REGBASE+$1dc ;can2 identifier mask register 4
01dd                    CAN2IDM5:        equ REGBASE+$1dd ;can2 identifier mask register 5
01de                    CAN2IDM6:        equ REGBASE+$1de ;can2 identifier mask register 6
01df                    CAN2IDM7:        equ REGBASE+$1df ;can2 identifier mask register 7
01e0                    CAN2RXFG:        equ REGBASE+$1e0 ;can2 rx foreground buffer thru +$1ef
01f0                    CAN2TXFG:        equ REGBASE+$1f0 ;can2 tx foreground buffer thru +$1ff
                        
0200                    CAN3CTL0:        equ REGBASE+$200 ;can3 control register 0
0201                    CAN3CTL1:        equ REGBASE+$201 ;can3 control register 1
0202                    CAN3BTR0:        equ REGBASE+$202 ;can3 bus timing register 0
0203                    CAN3BTR1:        equ REGBASE+$203 ;can3 bus timing register 1
0204                    CAN3RFLG:        equ REGBASE+$204 ;can3 receiver flags
0205                    CAN3RIER:        equ REGBASE+$205 ;can3 receiver interrupt enables
0206                    CAN3TFLG:        equ REGBASE+$206 ;can3 transmit flags
0207                    CAN3TIER:        equ REGBASE+$207 ;can3 transmit interrupt enables
0208                    CAN3TARQ:        equ REGBASE+$208 ;can3 transmit message abort control
0209                    CAN3TAAK:        equ REGBASE+$209 ;can3 transmit message abort status
020a                    CAN3TBEL:        equ REGBASE+$20a ;can3 transmit buffer select
020b                    CAN3IDAC:        equ REGBASE+$20b ;can3 identfier acceptance control
                        
020e                    CAN3RERR:        equ REGBASE+$20e ;can3 receive error counter
020f                    CAN3TERR:        equ REGBASE+$20f ;can3 transmit error counter
0210                    CAN3IDA0:        equ REGBASE+$210 ;can3 identifier acceptance register 0
0211                    CAN3IDA1:        equ REGBASE+$211 ;can3 identifier acceptance register 1
0212                    CAN3IDA2:        equ REGBASE+$212 ;can3 identifier acceptance register 2
0213                    CAN3IDA3:        equ REGBASE+$213 ;can3 identifier acceptance register 3
0214                    CAN3IDM0:        equ REGBASE+$214 ;can3 identifier mask register 0
0215                    CAN3IDM1:        equ REGBASE+$215 ;can3 identifier mask register 1
0216                    CAN3IDM2:        equ REGBASE+$216 ;can3 identifier mask register 2
0217                    CAN3IDM3:        equ REGBASE+$217 ;can3 identifier mask register 3
0218                    CAN3IDA4:        equ REGBASE+$218 ;can3 identifier acceptance register 4
0219                    CAN3IDA5:        equ REGBASE+$219 ;can3 identifier acceptance register 5
021a                    CAN3IDA6:        equ REGBASE+$21a ;can3 identifier acceptance register 6
021b                    CAN3IDA7:        equ REGBASE+$21b ;can3 identifier acceptance register 7
021c                    CAN3IDM4:        equ REGBASE+$21c ;can3 identifier mask register 4
021d                    CAN3IDM5:        equ REGBASE+$21d ;can3 identifier mask register 5
021e                    CAN3IDM6:        equ REGBASE+$21e ;can3 identifier mask register 6
021f                    CAN3IDM7:        equ REGBASE+$21f ;can3 identifier mask register 7
0220                    CAN3RXFG:        equ REGBASE+$220 ;can3 rx foreground buffer thru +$22f
0230                    CAN3TXFG:        equ REGBASE+$230 ;can3 tx foreground buffer thru +$23f
                        
0240                    PTT:                equ REGBASE+$240 ;portt data register
0241                    PTIT:                equ REGBASE+$241 ;portt input register
0242                    DDRT:                equ REGBASE+$242 ;portt direction register
0243                    RDRT:                equ REGBASE+$243 ;portt reduced drive register
0244                    PERT:                equ REGBASE+$244 ;portt pull device enable
0245                    PPST:                equ REGBASE+$245 ;portt pull polarity select
                        
0248                    PTS:                equ REGBASE+$248 ;ports data register
0249                    PTIS:                equ REGBASE+$249 ;ports input register
024a                    DDRS:                equ REGBASE+$24a ;ports direction register
024b                    RDRS:                equ REGBASE+$24b ;ports reduced drive register
024c                    PERS:                equ REGBASE+$24c ;ports pull device enable
024d                    PPSS:                equ REGBASE+$24d ;ports pull polarity select
024e                    WOMS:                equ REGBASE+$24e ;ports wired or mode register
                        
0250                    PTM:                equ REGBASE+$250 ;portm data register
0251                    PTIM:                equ REGBASE+$251 ;portm input register
0252                    DDRM:                equ REGBASE+$252 ;portm direction register
0253                    RDRM:                equ REGBASE+$253 ;portm reduced drive register
0254                    PERM:                equ REGBASE+$254 ;portm pull device enable
0255                    PPSM:                equ REGBASE+$255 ;portm pull polarity select
0256                    WOMM:                equ REGBASE+$256 ;portm wired or mode register
0257                    MODRR:                equ REGBASE+$257 ;portm module routing register
                        
0258                    PTP:                equ REGBASE+$258 ;portp data register
0259                    PTIP:                equ REGBASE+$259 ;portp input register
025a                    DDRP:                equ REGBASE+$25a ;portp direction register
025b                    RDRP:                equ REGBASE+$25b ;portp reduced drive register
025c                    PERP:                equ REGBASE+$25c ;portp pull device enable
025d                    PPSP:                equ REGBASE+$25d ;portp pull polarity select
025e                    PIEP:                equ REGBASE+$25e ;portp interrupt enable register
025f                    PIFP:                equ REGBASE+$25f ;portp interrupt flag register
                        
0260                    PTH:                equ REGBASE+$260 ;porth data register
0261                    PTIH:                equ REGBASE+$261 ;porth input register
0262                    DDRH:                equ REGBASE+$262 ;porth direction register
0263                    RDRH:                equ REGBASE+$263 ;porth reduced drive register
0264                    PERH:                equ REGBASE+$264 ;porth pull device enable
0265                    PPSH:                equ REGBASE+$265 ;porth pull polarity select
0266                    PIEH:                equ REGBASE+$266 ;porth interrupt enable register
0267                    PIFH:                equ REGBASE+$267 ;porth interrupt flag register
                        
0268                    PTJ:                equ REGBASE+$268 ;portj data register
0269                    PTIJ:                equ REGBASE+$269 ;portj input register
026a                    DDRJ:                equ REGBASE+$26a ;portj direction register
026b                    RDRJ:                equ REGBASE+$26b ;portj reduced drive register
026c                    PERJ:                equ REGBASE+$26c ;portj pull device enable
026d                    PPSJ:                equ REGBASE+$26d ;portj pull polarity select
026e                    PIEJ:                equ REGBASE+$26e ;portj interrupt enable register
026f                    PIFJ:                equ REGBASE+$26f ;portj interrupt flag register
                        
0280                    CAN4CTL0:        equ REGBASE+$280 ;can4 control register 0
0281                    CAN4CTL1:        equ REGBASE+$281 ;can4 control register 1
0282                    CAN4BTR0:        equ REGBASE+$282 ;can4 bus timing register 0
0283                    CAN4BTR1:        equ REGBASE+$283 ;can4 bus timing register 1
0284                    CAN4RFLG:        equ REGBASE+$284 ;can4 receiver flags
0285                    CAN4RIER:        equ REGBASE+$285 ;can4 receiver interrupt enables
0286                    CAN4TFLG:        equ REGBASE+$286 ;can4 transmit flags
0287                    CAN4TIER:        equ REGBASE+$287 ;can4 transmit interrupt enables
0288                    CAN4TARQ:        equ REGBASE+$288 ;can4 transmit message abort control
0289                    CAN4TAAK:        equ REGBASE+$289 ;can4 transmit message abort status
028a                    CAN4TBEL:        equ REGBASE+$28a ;can4 transmit buffer select
028b                    CAN4IDAC:        equ REGBASE+$28b ;can4 identfier acceptance control
                        
028e                    CAN4RERR:        equ REGBASE+$28e ;can4 receive error counter
028f                    CAN4TERR:        equ REGBASE+$28f ;can4 transmit error counter
0290                    CAN4IDA0:        equ REGBASE+$290 ;can4 identifier acceptance register 0
0291                    CAN4IDA1:        equ REGBASE+$291 ;can4 identifier acceptance register 1
0292                    CAN4IDA2:        equ REGBASE+$292 ;can4 identifier acceptance register 2
0293                    CAN4IDA3:        equ REGBASE+$293 ;can4 identifier acceptance register 3
0294                    CAN4IDM0:        equ REGBASE+$294 ;can4 identifier mask register 0
0295                    CAN4IDM1:        equ REGBASE+$295 ;can4 identifier mask register 1
0296                    CAN4IDM2:        equ REGBASE+$296 ;can4 identifier mask register 2
0297                    CAN4IDM3:        equ REGBASE+$297 ;can4 identifier mask register 3
0298                    CAN4IDA4:        equ REGBASE+$298 ;can4 identifier acceptance register 4
0299                    CAN4IDA5:        equ REGBASE+$299 ;can4 identifier acceptance register 5
029a                    CAN4IDA6:        equ REGBASE+$29a ;can4 identifier acceptance register 6
029b                    CAN4IDA7:        equ REGBASE+$29b ;can4 identifier acceptance register 7
029c                    CAN4IDM4:        equ REGBASE+$29c ;can4 identifier mask register 4
029d                    CAN4IDM5:        equ REGBASE+$29d ;can4 identifier mask register 5
029e                    CAN4IDM6:        equ REGBASE+$29e ;can4 identifier mask register 6
029f                    CAN4IDM7:        equ REGBASE+$29f ;can4 identifier mask register 7
02a0                    CAN4RXFG:        equ REGBASE+$2a0 ;can4 rx foreground buffer thru +$2af
02b0                    CAN4TXFG:        equ REGBASE+$2b0 ;can4 tx foreground buffer thru +$2bf
                        
                        * end registers
                        #endinclude

                        
                        
                        
                        ;#################################################################
                        ;               Definicion de estructuras de datos
                        
                        
000d                    CR:             equ $0D
000a                    LF:             equ $0A
0000                    FIN:            equ $0
                        
1000                                    org $1000
1000 02                 MAX_TCL:        db 2
1001                    TECLA:          ds 1
1002                    TECLA_IN:       ds 1
                        
1003                    CONT_REB:       ds 1
1004                    CONT_TCL:       ds 1
1005                    PATRON:         ds 1
1006                    BANDERAS:       ds 1        ;bit 5 cambio nodo, bit 4 modsel, bit 6 rs
                        
                        
1030                                    org $1030
1030                    NUM_ARRAY:      ds $10
1040                                    org $1040
1040 01 02 03 04 05 06  TECLAS:         db $01,$02,$03,$04,$05,$06,$07,$08,$09,$0B,$00,$0E
     07 08 09 0b 00 0e
                        
1007                                    org $1007
1007                    CUENTA:         ds 1        ;Cantidad de clavos
1008                    ACUMUL:         ds 1        ;Cantidad de bolsas
1009                    CPROG:          ds 1        ;Cantidad maxima de clavos por bolsa
100a fa                 VMAX:           db 250      ;valor maximo de contador TIMER_CUENTA que simula los clavos, 250 para lograr 4 Hz
100b                    TIMER_CUENTA:   ds 1        ;contador de rti simula clavos
100c                    LEDS:           ds 1        ;valor que se envia al puerto B para los leds
100d                    BRILLO:         ds 1        ; 0-100 cotrola el brillo de 7 seg
100e                    CONT_DIG:       ds 1        ;digito actual de 7seg
100f                    CONT_TICKS:     ds 1        ;
1010                    BIN1:           ds 1        ;corresponde al valor de DISP1 y DISP2 en binario
1011                    BIN2:           ds 1        ;corresponde al valor de DISP4 y DISP3 en binario
1012                    DT:             ds 1        ;100 - BRILLO, valor donde se resetea CONT_TICKS
1013                    LOW:            ds 1        ;ni idea
1014                    BCD1:           ds 1        ;bin 1 en bcd
1015                    BCD2:           ds 1        ;bin 2 en bcd
1016                    DISP1:          ds 1        ;izquierda bcd1
1017                    DISP2:          ds 1        ;derecha bcd1
1018                    DISP3:          ds 1        ;izquierda bcd 2
1019                    DISP4:          ds 1        ;derecha bcd2   
1050                                    org $1050
1050 3f 06 5b 4f 66 6d  SEGMENT:        db $3F,$06,$5B,$4F,$66,$6D,$7D,$07,$7F,$6F  ;0,1,2,3,4,5,6,7,8,9
     7d 07 7f 6f
1021                                    org $1021
1021                    CONT_7SEG:      ds 2        ;cuando llega a 5000 se actualizan los valores de DISP
1023                    CONT_DELAY:     ds 1        ;
1024 64                 D2mS:           db 100
1025 0d                 D240uS:         db 13
1026 03                 D60uS:          db 3
1027 01                 Clear_LCD:      db $01      ;constante igual a comando clear
1028 80                 ADD_L1:         db $80      ;constante igual a Adress linea 1 lcd
1029 c0                 ADD_L2:         db $C0      ;constante igual a Adress linea 2 lcd
102a 04 28 28 06 0c     iniDsp:         db 04,$28,$28,$06,$0C     ;numero de bytes,function set, function set, entry mode, display on off
                        
1070                                    org $1070
1070 4d 4f 44 4f 20 43  MESS1:          fcc "MODO CONFIG"
     4f 4e 46 49 47
107b 00                                 db FIN
107c 49 4e 47 52 45 53  MESS2:          fcc "INGRESE CPROG"
     45 20 43 50 52 4f
     47
1089 00                                 db FIN
108a 4d 4f 44 4f 20 52  MESS3:          fcc "MODO RUN"
     55 4e
1092 00                                 db FIN
1093 41 43 55 4d 55 4c  MESS4:          fcc "ACUMUL.-CUENTA"
     2e 2d 43 55 45 4e
     54 41
10a1 00                                 db FIN
10a2                    TEMP:           ds 1
10a3                    BCD_t:          ds 1
                        
                        
                        
                        
                                        
                                        
3e70                                    org $3E70
3e70 24 a6                              dw INIT_ISR
3e4c                                    org $3E4C
3e4c 24 41                              dw PTH_ISR
3e66                                    org $3E66
3e66 24 ba                              dw OC4_ISR
                        
                        ;################################################
                        ;       Programa principal
2000                                    org $2000
                        
                        ;################################################
                        ;       Definicion de hardware
                        
                        ;       LEDS
2000 18 0b ff 00 03                     movb #$FF, DDRB
2005 1c 02 6a 02                        bset DDRJ,$02
2009 1c 02 68 02                        bset PTJ, $02
                        
                        ;       7SEG
200d 18 0b 0f 02 5a                     movb #$0F, DDRP
2012 18 0b 0f 02 58                     movb #$0F, PTP
                        ;       Output compare
2017 18 0b 90 00 46                     movb #$90, TSCR1
201c 18 0b 03 00 4d                     movb #$03, TSCR2
2021 18 0b 10 00 40                     movb #$10, TIOS
2026 18 0b 01 00 48                     movb #$01, TCTL1
202b 18 0b 00 00 49                     movb #$00, TCTL2
2030 18 0b 10 00 4c                     movb #$10, TIE
2035 dc 44                              ldd TCNT
2037 c3 00 3c                           addd #60
203a 5c 58                              std TC4
                                        
203c 18 0b ff 00 33                     movb #$FF,DDRK
                        
                        ;       Puerto H sw
                        
2041 1c 02 66 0c                        bset PIEH, $0C          ;habilitar interrupciones PH
2045 1c 02 67 0f                        bset PIFH, $0F
                        ;       RTI                 
2049 18 0b 17 00 3b                     movb #$17, RTICTL       ; esto lo pone en 1.024 ms
204e 4c 38 80                           bset CRGINT, $80        ;habilitar interrupciones rti
                        ;       Puerto A teclado                
2051 18 0b f0 00 02                     movb #$F0, DDRA
2056 4c 0c 01                           bset PUCR, $01          ;Super importante habilitar resistencia de pullup
                        ;                bclr RDRIV, $01
                        ;       Puerto E rele
2059 4c 09 04                           bset DDRE,$04
205c 10 ef                              cli
                        
                        
                        
                        ;################################################
                        
                        ;               inicializacion
205e cf 3b ff                           lds #$3BFF
2061 18 0b 00 10 14                     movb #$00,BCD1
2066 18 0b 00 10 15                     movb #$00,BCD2
206b 18 0b 00 10 11                     movb #$00,BIN2
2070 18 0b 00 10 10                     movb #$00,BIN1
2075 18 0b 02 10 0c                     movb #02,LEDS
207a 18 0b 00 10 16                     movb #0,DISP1
207f 18 0b 00 10 17                     movb #0,DISP2
2084 18 0b 00 10 18                     movb #0,DISP3
2089 18 0b 00 10 19                     movb #0,DISP4
                                        ;modser=1
208e 18 0b 01 10 0e                     movb #1,CONT_DIG
2093 18 0b 00 10 0f                     movb #0,CONT_TICKS
2098 18 0b 32 10 0d                     movb #50, BRILLO
209d 18 0b 00 10 09                     movb #00, CPROG
20a2 18 0c 10 0a 10 0b                  movb VMAX,TIMER_CUENTA
                        
20a8 18 0b ff 10 01                     movb #$FF, TECLA
20ad 18 0b ff 10 02                     movb #$FF, TECLA_IN
20b2 18 0b 00 10 04                     movb #$00, CONT_TCL
20b7 18 0b 00 10 03                     movb #$00, CONT_REB
20bc 1d 10 06 07                        bclr BANDERAS,$07      ;Poner las banderas en 0
20c0 1c 10 06 18                        bset BANDERAS,$18      ;Poner la bandera cambio nodo en 1 y modo en 1
20c4 b6 10 00                           ldaa MAX_TCL
20c7 ce 10 2f                           ldx #NUM_ARRAY-1
20ca 18 08 e4 ff        LoopCLR:        movb #$FF,A,X          ;iniciar el arreglo en FF
20ce 04 30 f9                           dbne A,LoopCLR
                        
                        
                        ;       Programa main               
                        mainL:          loc
20d1 f7 10 09                           tst CPROG
20d4 27 29                              beq chknodoM1
20d6 b6 02 61                           ldaa PTIH
20d9 84 80                              anda #$80
20db f6 10 06                           ldab BANDERAS
20de c4 08                              andb #$08
20e0 58                                 lslb 
20e1 58                                 lslb 
20e2 58                                 lslb 
20e3 58                                 lslb 
20e4 18 17                              cba
20e6 27 12                              beq nochange`
20e8 1c 10 06 10                        bset BANDERAS,$10
20ec 81 80                              cmpa #$80
20ee 27 06                              beq ph1`
20f0 1d 10 06 08                        bclr BANDERAS,$08
20f4 20 04                              bra nochange`
20f6 1c 10 06 08        ph1`            bset BANDERAS,$08
                        
20fa 1f 10 06 08 34     nochange`       brclr BANDERAS,$08,chknodoM0
20ff 1f 10 06 10 2a     chknodoM1:      brclr BANDERAS,$10,jmodoconfig`
2104 1d 10 06 10                        bclr BANDERAS,$10
2108 18 0b 02 10 0c                     movb #$02,LEDS
210d 18 0c 10 09 10 10                  movb CPROG,BIN1
2113 18 0b 00 10 11                     movb #0,BIN2
2118 18 0b 00 10 08                     movb #0,ACUMUL
211d 18 0b 00 10 07                     movb #0,CUENTA
2122 4d 08 04                           bclr PORTE,$04
2125 ce 10 70                           ldx #MESS1
2128 cd 10 7c                           ldy #MESS2
212b 16 22 6f                           jsr CARGAR_LCD
                                        
                        
212e 16 23 d0           jmodoconfig`    jsr MODO_CONFIG
2131 20 1a                              bra returnmain
2133 1f 10 06 10 12     chknodoM0:      brclr BANDERAS,$10,jmodorun`
2138 1d 10 06 10                        bclr BANDERAS,$10
213c 18 0b 01 10 0c                     movb #$01,LEDS
2141 ce 10 8a                           ldx #MESS3
2144 cd 10 93                           ldy #MESS4
2147 16 22 6f                           jsr CARGAR_LCD
214a 16 24 03           jmodorun`       jsr MODO_RUN
                                      
214d 16 23 42           returnmain:     jsr BIN_BCD
2150 06 20 d1                           jmp mainL
                        
                        
                        
                                        
                                        
                        ;################################################
                        ;       Subrutinas
                        ;################################################
                        ;       Subrutinas Generales
                        
                        
                        ;       Subrutina Tarea Teclado
                        TAREA_TECLADO:  loc
2153 f7 10 03                           tst CONT_REB
2156 26 47                              bne return`
2158 16 21 a0                           jsr MUX_TECLADO
215b b6 10 01                           ldaa TECLA
215e 81 ff                              cmpa #$FF
2160 27 31                              beq checkLista`
2162 1e 10 06 02 11                     brset BANDERAS,$02,checkLeida`        ;revision de bandera Tecla leida
2167 18 0c 10 01 10 02                  movb TECLA,TECLA_IN
216d 1c 10 06 02                        bset BANDERAS,$02
2171 18 0b 0a 10 03                     movb #10,CONT_REB                       ;iniciar contador de rebotes
2176 20 27                              bra return`
2178 b1 10 02           checkLeida`     cmpa TECLA_IN                           ;Comparar Tecla con tecla_in
217b 26 06                              bne Diferente`
217d 1c 10 06 01                        bset BANDERAS,$01
2181 20 1c                              bra return`
2183 18 0b ff 10 01     Diferente`      movb #$FF,TECLA                         ;Las teclas son invalidas
2188 18 0b ff 10 02                     movb #$FF,TECLA_IN
218d 1d 10 06 03                        bclr BANDERAS,$03
2191 20 0c                              bra return`
2193 1f 10 06 01 07     checkLista`     brclr BANDERAS,$01,return`              ;el numero esta listo
2198 1d 10 06 03                        bclr BANDERAS,$03
219c 16 22 0b                           jsr FORMAR_ARRAY
219f 3d                 return`         rts
                        
                        ;       Subrutina MUX_TECLADO
                        MUX_TECLADO:    loc
21a0 c6 00                              ldab #0
21a2 18 0b 00 10 05                     movb #0,PATRON
21a7 ce 10 40                           ldx #TECLAS
21aa f7 10 05           mainloop`       tst PATRON
21ad 26 07                              bne p1
21af 18 0b ef 00 00                     movb #$EF,PORTA
21b4 20 26                              bra READ
21b6 86 01              p1:             ldaa #1
21b8 b1 10 05                           cmpa PATRON
21bb 26 07                              bne p2
21bd 18 0b df 00 00                     movb #$DF,PORTA
21c2 20 18                              bra READ
21c4 42                 p2:             inca                    ;A=2
21c5 b1 10 05                           cmpa PATRON
21c8 26 07                              bne p3
21ca 18 0b bf 00 00                     movb #$BF,PORTA
21cf 20 0b                              bra READ
21d1 42                 p3:             inca                    ;A=3
21d2 b1 10 05                           cmpa PATRON             ;Se detecta cual patron se debe usar en la salida
21d5 26 27                              bne nk
21d7 18 0b 7f 00 00                     movb #$7F,PORTA
21dc a7                 read:           nop
21dd a7                                 nop
21de a7                                 nop
21df a7                                 nop
21e0 a7                                 nop
21e1 a7                                 nop
21e2 a7                                 nop
21e3 a7                                 nop
21e4 a7                                 nop
21e5 a7                                 nop
21e6 a7                                 nop
21e7 a7                                 nop
21e8 a7                                 nop
21e9 a7                                 nop                     ;corrige problema de primera fila
21ea 4f 00 01 17                        brclr PORTA,$01, treturn`       ;se leen las entradas para encontrar la tecla presionada
21ee 52                                 incb
21ef 4f 00 02 12                        brclr PORTA,$02, treturn`
21f3 52                                 incb
21f4 4f 00 04 0d                        brclr PORTA,$04, treturn`
21f8 52                                 incb
21f9 72 10 05                           inc PATRON
21fc 20 ac                              bra mainloop`
21fe 18 0b ff 10 01     nk              movb #$FF,TECLA                 ;Se guarda la tecla o se retorna FF
2203 20 05                              bra return`
2205 18 0d e5 10 01     treturn`        movb B,X,TECLA
220a 3d                 return`         rts
                        ;       Subrutina formar array
                        
                        FORMAR_ARRAY:   loc
220b ce 10 30                           ldx #NUM_ARRAY
220e b6 10 02                           ldaa TECLA_IN
2211 f6 10 04                           ldab CONT_TCL
2214 27 0f                              beq check_MAX`
2216 81 0e                              cmpa #$0E
2218 27 1b                              beq t_enter`
221a 81 0b                              cmpa #$0B
221c 27 22                              beq t_borrar`
221e f1 10 00                           cmpb MAX_TCL
2221 27 25                              beq return`
2223 20 08                              bra guardar`
2225 81 0e              check_MAX`      cmpa #$0E
2227 27 1f                              beq return`
2229 81 0b                              cmpa #$0B
222b 27 1b                              beq return`
222d 6a e5              guardar`        staa B,X
222f 52                                 incb
2230 7b 10 04                           stab CONT_TCL
2233 20 13                              bra return`
2235 1c 10 06 04        t_enter`        bset BANDERAS,$04
2239 18 0b 00 10 04                     movb #$0,CONT_TCL
223e 20 08                              bra return`
2240 53                 t_borrar`       decb
2241 18 08 e5 ff                        movb #$FF,B,X
2245 7b 10 04                           stab CONT_TCL
2248 3d                 return`         rts
                        
                        ;       BCD_7SEG
                        BCD_7SEG:       loc
2249 ce 10 50                           ldx #SEGMENT
224c cd 10 16                           ldy #DISP1
224f 86 00                              ldaa #0
2251 f6 10 14                           ldab BCD1
2254 20 03                              bra subrutinabcd`
2256 f6 10 15           loadBCD2`       ldab BCD2
2259 37                 subrutinabcd`   pshb 
225a c4 0f                              andb #$0F
225c 18 0a e5 70                        movb B,X,1,Y+      ;muevo la parte baja de bcd a disp2 o disp 4
2260 33                                 pulb 
2261 54                                 lsrb
2262 54                                 lsrb
2263 54                                 lsrb
2264 54                                 lsrb
2265 18 0a e5 70                        movb B,X,1,Y+     ;muevo la parte alta de bcd a disp 1 o disp4
2269 8d 10 18                           cpy #DISP3
226c 27 e8                              beq loadBCD2`
226e 3d                 returnBCD_7SEG: rts
                        
                        
                        ;       CARGAR_LCD
                        CARGAR_LCD:     loc
226f 34                                 pshx
2270 ce 10 2a                           ldx #iniDsp
2273 e6 30                              ldab 1,X+
2275 a6 30              loop1`          ldaa 1,X+
2277 1d 10 06 20                        bclr BANDERAS,$20
227b 16 22 f5                           jsr Send
227e 18 0c 10 26 10 23                  movb D60uS,CONT_DELAY
2284 16 23 3c                           jsr Delay
2287 04 31 eb                           dbne B,loop1`           ;hasta aqui se estan mandando los comando iniciales de dsp
228a 1d 10 06 20                        bclr BANDERAS,$20
228e b6 10 27                           ldaa Clear_LCD
2291 16 22 f5                           jsr Send                ;hasta aqui se borra la pantalla
2294 18 0c 10 24 10 23                  movb D2mS,CONT_DELAY
229a 16 23 3c                           jsr Delay
229d 30                                 pulx
229e b6 10 28                           ldaa ADD_L1                        ;aqui empieza cargar lcd
22a1 1d 10 06 20                        bclr BANDERAS,$20
22a5 16 22 f5                           jsr Send
22a8 18 0c 10 26 10 23                  movb D60uS,CONT_DELAY
22ae 16 23 3c                           jsr Delay
22b1 a6 30              loop2`          ldaa 1,X+
22b3 81 00                              cmpa #FIN
22b5 27 12                              beq linea2`
22b7 1c 10 06 20                        bset BANDERAS,$20
22bb 16 22 f5                           jsr Send
22be 18 0c 10 26 10 23                  movb D60uS,CONT_DELAY
22c4 16 23 3c                           jsr Delay
22c7 20 e8                              bra loop2`
22c9 b6 10 29           linea2`         ldaa ADD_L2                        ;aqui empieza cargar la linea 2
22cc 1d 10 06 20                        bclr BANDERAS,$20
22d0 16 22 f5                           jsr Send
22d3 18 0c 10 26 10 23                  movb D60uS,CONT_DELAY
22d9 16 23 3c                           jsr Delay
22dc a6 70              loop3`          ldaa 1,Y+
22de 81 00                              cmpa #FIN
22e0 27 12                              beq returnLCD`
22e2 1c 10 06 20                        bset BANDERAS,$20
22e6 16 22 f5                           jsr Send
22e9 18 0c 10 26 10 23                  movb D60uS,CONT_DELAY
22ef 16 23 3c                           jsr Delay
22f2 20 e8                              bra loop3`
22f4 3d                 returnLCD`      rts
                        
                        
                        ;       Send
                                        loc
22f5 36                 Send:           psha
22f6 84 f0                              anda #$F0
22f8 44                                 lsra
22f9 44                                 lsra
22fa 5a 32                              staa PORTK
22fc 1e 10 06 20 05                     brset BANDERAS,$20,dato1`
2301 4d 32 01                           bclr PORTK,$01
2304 20 03                              bra continue1`
2306 4c 32 01           dato1`           bset PORTK,$01
2309 4c 32 02           continue1`      bset PORTK,$02
230c 18 0c 10 25 10 23                  movb D240uS,CONT_DELAY
2312 16 23 3c                           jsr Delay
2315 4d 32 02                           bclr PORTK,$02
2318 32                                 pula
2319 84 0f                              anda #$0F
231b 48                                 lsla
231c 48                                 lsla
231d 5a 32                              staa PORTK
231f 1e 10 06 20 05                     brset BANDERAS,$20,dato2`
2324 4d 32 01                           bclr PORTK,$01
2327 20 03                              bra continue2`
2329 4c 32 01           dato2`          bset PORTK,$01
232c 4c 32 02           continue2`      bset PORTK,$02
232f 18 0c 10 25 10 23                  movb D240uS,CONT_DELAY
2335 16 23 3c                           jsr Delay
2338 4d 32 02                           bclr PORTK,$02
233b 3d                                 rts    
                        
                        ;       Delay
                                        loc
233c f7 10 23           Delay:          tst CONT_DELAY 
233f 26 fb                              bne Delay
2341 3d                                 rts
                        
                        
                        ;       BIN_BCD
                                        loc
2342 c6 0e              BIN_BCD:        ldab #14
2344 18 0b 00 10 a3                     movb #0,BCD_t
2349 b6 10 10                           ldaa BIN1   ;inicio con bcd1
234c ce 10 a3                           ldx #BCD_t    
234f 20 11                              bra loop`
2351 48                 changeBCD`      lsla
2352 65 00                              rol 0,X
2354 b6 10 11                           ldaa BIN2   ;continua con bcd2
2357 18 0c 10 a3 10 14                  movb BCD_t,BCD1
235d 18 0b 00 10 a3                     movb #0,BCD_t    
2362 48                 loop`           lsla
2363 65 00                              rol 0,X
2365 7a 10 a2                           staa TEMP
2368 a6 00                              ldaa 0,X
236a 84 0f                              anda #$0F
236c 81 05                              cmpa #5
236e 2d 02                              blt continue1`
2370 8b 03                              adda #3
2372 7a 10 13           continue1`      staa LOW 
2375 a6 00                              ldaa 0,X
2377 84 f0                              anda #$F0
2379 81 50                              cmpa #$50
237b 2d 02                              blt continue2`
237d 8b 30                              adda #$30
237f bb 10 13           continue2`      adda LOW
2382 6a 00                              staa 0,X
2384 b6 10 a2                           ldaa TEMP
2387 53                                 decb
2388 c1 07                              cmpb #7
238a 27 c5                              beq changeBCD`
238c c1 00                              cmpb #$0 
238e 26 d2                              bne loop`
2390 48                                 lsla
2391 65 00                              rol 0,X
2393 18 0c 10 a3 10 15                  movb BCD_t,BCD2                             
2399 3d                                 rts
                        
                        ;       BCD_BIN
                                        loc
239a ce 10 30           BCD_BIN:        ldx #NUM_ARRAY
239d a6 01                              ldaa 1,X
239f 81 ff                              cmpa #$FF       ;verifica que el segundo numero no sea FF
23a1 27 22                              beq wrong`
23a3 86 00                              ldaa #0
23a5 81 00              loop`           cmpa #0
23a7 27 04                              beq mul10`;
23a9 eb e4                              addb A,X    
23ab 20 09                              bra sumarA`
23ad e6 e4              mul10`          ldab A,X
23af 58                                 lslb
23b0 58                                 lslb
23b1 58                                 lslb        ;mult por 8
23b2 eb e4                              addb A,X
23b4 eb e4                              addb A,X    ;mult por 10
23b6 18 08 e4 ff        sumarA`         movb #$FF,A,X
23ba 42                                 inca
23bb b1 10 00                           cmpa MAX_TCL
23be 26 e5                              bne loop`
23c0 7b 10 09                           stab CPROG 
23c3 20 0a                              bra return`
23c5 18 0b ff 10 30     wrong`          movb #$FF,NUM_ARRAY
23ca 18 0b 00 10 09                     movb #$0,CPROG
23cf 3d                 return`         rts
                        
                        ;       MODO_CONFIG
                        MODO_CONFIG:    loc
23d0 1d 02 66 03                        bclr PIEH,$03
23d4 1f 10 06 04 1f                     brclr BANDERAS,$04,jtarea_teclado`
23d9 16 23 9a                           jsr BCD_BIN
23dc 1d 10 06 04                        bclr BANDERAS,$04
23e0 b6 10 09                           ldaa CPROG
23e3 81 60                              cmpa #96
23e5 2e 16                              bgt resetCPROG`
23e7 81 0c                              cmpa #12
23e9 2d 12                              blt resetCPROG`
23eb 18 0c 10 09 10 10                  movb CPROG,BIN1
23f1 18 0b 00 10 11                     movb #0,BIN2
23f6 20 0a                              bra returnCofig
23f8 16 21 53           jtarea_teclado` jsr TAREA_TECLADO
23fb 20 05                              bra returnCofig
23fd 18 0b 00 10 09     resetCPROG`     movb #0,CPROG
2402 3d                 returnCofig:    rts
                        
                        ;       MODO_RUN
2403 1c 02 66 03        MODO_RUN:       bset PIEH,$03
2407 b6 10 09                           ldaa CPROG
240a b1 10 07                           cmpa CUENTA
240d 27 25                              beq returnRUN`
240f f7 10 0b                           tst TIMER_CUENTA
2412 26 20                              bne returnRUN`
2414 18 0c 10 0a 10 0b                  movb VMAX,TIMER_CUENTA
241a 72 10 07                           inc CUENTA
241d b1 10 07                           cmpa CUENTA
2420 26 12                              bne returnRUN`
2422 72 10 08                           inc ACUMUL
2425 4c 08 04                           bset PORTE,$04
2428 b6 10 08                           ldaa ACUMUL
242b 81 64                              cmpa #100
242d 26 05                              bne returnRUN`
242f 18 0b 00 10 08                     movb #0,ACUMUL
2434 18 0c 10 07 10 10  returnRUN`      movb CUENTA,BIN1
243a 18 0c 10 08 10 11                  movb ACUMUL,BIN2                            
2440 3d                                 rts
                        
                        
                        
                        
                        
                        ;################################################
                        ;################################################
                        ;################################################
                        ;       Subrutinas de proposito especifico
                        
                        ;       Subrutinas PH
                        ;        subrutina de PHO
                        
                                        loc
2441 1e 02 67 01 0f     PTH_ISR:        brset PIFH,$01,PH0_ISR 
2446 1e 02 67 02 22                     brset PIFH,$02,PH1_ISR
244b 1e 02 67 04 34                     brset PIFH,$04,PH2_ISR
2450 1e 02 67 08 3f                     brset PIFH,$08,PH3_ISR
                        
                        ;       subrutina PH1
2455 1c 02 67 01        PH0_ISR:        bset PIFH, $01                          
2459 f7 10 03                           tst CONT_REB
245c 26 25                              bne returnPH
245e 18 0b 00 10 07                     movb #0,CUENTA
2463 18 0b 32 10 03                     movb #50,CONT_REB
2468 4d 08 04                           bclr PORTE,$04
246b 20 16                              bra returnPH
                        
                        ;       subrutina PH1
246d 1c 02 67 02        PH1_ISR:        bset PIFH, $02                          
2471 f7 10 03                           tst CONT_REB
2474 26 0d                              bne returnPH
2476 18 0b 00 10 08                     movb #0,ACUMUL
247b 18 0b 32 10 03                     movb #50,CONT_REB
2480 4d 08 04                           bclr PORTE,$04
2483 0b                 returnPH:       rti
                        ;       subrutina PH2                
2484 1c 02 67 04        PH2_ISR:        bset PIFH, $04
2488 b6 10 0d                           ldaa BRILLO
248b 27 f6                              beq returnPH
248d 80 05                              suba #5
248f 7a 10 0d                           staa BRILLO
2492 20 ef                              bra returnPH
                        ;       subrutina PH3
2494 1c 02 67 08        PH3_ISR:        bset PIFH, $08
2498 b6 10 0d                           ldaa BRILLO
249b 81 64                              cmpa #100
249d 27 e4                              beq returnPH
249f 8b 05                              adda #5
24a1 7a 10 0d                           staa BRILLO
24a4 20 dd                              bra returnPH                
                        
                        
                        
                        ;       subrutina de rti
                                        loc
24a6 4c 37 80           INIT_ISR:       bset CRGFLG, $80
24a9 f7 10 03                           tst CONT_REB
24ac 27 03                              beq chktimercnt
24ae 73 10 03                           dec CONT_REB
24b1 f7 10 0b           chktimercnt:    tst TIMER_CUENTA
24b4 27 03                              beq return`
24b6 73 10 0b                           dec TIMER_CUENTA
24b9 0b                 return`         rti
                        
                        
                        ;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                        ;   Subrutina OC4
                                        loc
24ba b6 10 0f           OC4_ISR:        ldaa CONT_TICKS
24bd c6 64                              ldab #100
24bf f0 10 0d                           subb BRILLO
24c2 18 17                              cba
24c4 27 0f                              beq apagar`
24c6 f7 10 0f                           tst CONT_TICKS
24c9 27 2c                              beq check_digit`
24cb 81 64              checkN`         cmpa #100
24cd 27 12                              beq changeDigit`
24cf 72 10 0f           incticks`       inc CONT_TICKS
24d2 06 25 70                           jmp part2`
                        ;Apagar
24d5 18 0b ff 02 58     apagar`         movb #$FF,PTP
24da 18 0b 00 00 01                     movb #$0, PORTB
24df 20 ea                              bra checkN`
                        ;           cambiar digito
24e1 18 0b 00 10 0f     changeDigit`    movb #$0, CONT_TICKS
24e6 72 10 0e                           inc CONT_DIG
24e9 86 06                              ldaa #6
24eb b1 10 0e                           cmpa CONT_DIG
24ee 26 05                              bne jpart2`                 ;no me alcanzo para hacer el primer salto 
24f0 18 0b 01 10 0e                     movb #1,CONT_DIG
24f5 20 79              jpart2`         bra part2`
                        ;           encender digito
24f7 b6 10 0e           check_digit`    ldaa CONT_DIG
24fa 81 01                              cmpa #1
24fc 26 10                              bne dig2`
24fe 1d 02 58 08                        bclr PTP, $08
2502 18 0c 10 16 00 01                  movb DISP1, PORTB
2508 1c 02 68 02                        bset PTJ, $02
250c 20 c1                              bra  incticks`
250e 81 02              dig2`           cmpa #2
2510 26 17                              bne dig3`
2512 1d 02 58 04                        bclr PTP, $04
2516 b6 10 17                           ldaa DISP2
2519 81 3f                              cmpa #$3F
251b 27 0a                              beq ndig2`
251d 18 0c 10 17 00 01                  movb DISP2, PORTB
2523 1c 02 68 02                        bset PTJ, $02
2527 20 a6              ndig2`          bra  incticks`
2529 81 03              dig3`           cmpa #3
252b 26 15                              bne dig4`
252d 1d 02 58 02                        bclr PTP, $02                
2531 1e 10 06 08 0a                     brset BANDERAS,$08,ndig3`
2536 18 0c 10 18 00 01                  movb DISP3, PORTB
253c 1c 02 68 02                        bset PTJ, $02
2540 20 8d              ndig3`          bra  incticks`
2542 81 04              dig4`           cmpa #4
2544 26 1d                              bne digleds`
2546 1d 02 58 01                        bclr PTP, $01
254a 1e 10 06 08 11                     brset BANDERAS,$08,ndig4`
254f b6 10 19                           ldaa DISP4
2552 81 3f                              cmpa #$3F
2554 27 0a                              beq ndig4`
2556 18 0c 10 19 00 01                  movb DISP4, PORTB
255c 1c 02 68 02                        bset PTJ, $02
2560 06 24 cf           ndig4`          jmp  incticks`
2563 18 0c 10 0c 00 01  digleds`        movb LEDS, PORTB
2569 1d 02 68 02                        bclr PTJ, $02
256d 72 10 0f                           inc CONT_TICKS
                        
                        
2570 f7 10 23           part2`          tst CONT_DELAY
2573 27 03                              beq tst7seg`
2575 73 10 23                           dec CONT_DELAY
2578 fe 10 21           tst7seg`        ldx CONT_7SEG
257b 27 0c                              beq JBCD_7SEG`
257d 09                                 dex
257e 7e 10 21                           stx CONT_7SEG
2581 dc 44              returnOC4       ldd TCNT
2583 c3 00 3c                           addd #60
2586 5c 58                              std TC4
2588 0b                                 rti
2589 18 03 13 88 10 21  JBCD_7SEG`      movw #5000,CONT_7SEG
258f 16 22 49                           jsr BCD_7SEG
2592 20 ed                              bra returnOC4

Executed: Tue Nov 05 01:18:57 2019
Total cycles: 1558, Total bytes: 1519
Total errors: 0, Total warnings: 0
